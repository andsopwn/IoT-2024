
aes_mul.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08002a54  08002a54  00003a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ad4  08002ad4  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ad4  08002ad4  00003ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002adc  08002adc  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002adc  08002adc  00003adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ae0  08002ae0  00003ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002ae4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000405c  2**0
                  CONTENTS
 10 .bss          00000170  2000005c  2000005c  0000405c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001cc  200001cc  0000405c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004281  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012e8  00000000  00000000  0000830d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000520  00000000  00000000  000095f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003c3  00000000  00000000  00009b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000200bc  00000000  00000000  00009edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006309  00000000  00000000  00029f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c07cf  00000000  00000000  000302a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f0a6f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000180c  00000000  00000000  000f0ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  000f22c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002a3c 	.word	0x08002a3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08002a3c 	.word	0x08002a3c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <poly_degree>:
	a1 = squa(mul(a, squa(a1)));

	return a1;
}

u32 poly_degree(u32 poly) {
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
    int deg = -1;
 8000578:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800057c:	60fb      	str	r3, [r7, #12]
    while(poly) {
 800057e:	e005      	b.n	800058c <poly_degree+0x1c>
        poly >>= 1;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	085b      	lsrs	r3, r3, #1
 8000584:	607b      	str	r3, [r7, #4]
        deg++;
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	3301      	adds	r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
    while(poly) {
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d1f6      	bne.n	8000580 <poly_degree+0x10>
    }
    return deg;
 8000592:	68fb      	ldr	r3, [r7, #12]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <gf_mod>:

u8 gf_mod(u8 a) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
    while(poly_degree(a) >= 8) {
 80005aa:	e011      	b.n	80005d0 <gf_mod+0x30>
        int shift = poly_degree(a) - 8;
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ffde 	bl	8000570 <poly_degree>
 80005b4:	4603      	mov	r3, r0
 80005b6:	3b08      	subs	r3, #8
 80005b8:	60fb      	str	r3, [r7, #12]
        a ^= 0x11b << shift;
 80005ba:	f240 121b 	movw	r2, #283	@ 0x11b
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	fa02 f303 	lsl.w	r3, r2, r3
 80005c4:	b25a      	sxtb	r2, r3
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	4053      	eors	r3, r2
 80005cc:	b25b      	sxtb	r3, r3
 80005ce:	71fb      	strb	r3, [r7, #7]
    while(poly_degree(a) >= 8) {
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff ffcc 	bl	8000570 <poly_degree>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b07      	cmp	r3, #7
 80005dc:	d8e6      	bhi.n	80005ac <gf_mod+0xc>
    }
    return a;
 80005de:	79fb      	ldrb	r3, [r7, #7]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <eea>:


u8 eea(u8 a) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08c      	sub	sp, #48	@ 0x30
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
    if (a == 0)
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d101      	bne.n	80005fc <eea+0x14>
        return 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	e05a      	b.n	80006b2 <eea+0xca>

    u32 u = a;
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    u32 v = 0x11b;
 8000600:	f240 131b 	movw	r3, #283	@ 0x11b
 8000604:	62bb      	str	r3, [r7, #40]	@ 0x28
    u32 g1 = 1;
 8000606:	2301      	movs	r3, #1
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24
    u32 g2 = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	623b      	str	r3, [r7, #32]

    for (int i = 0; i < 8; i++) {
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]
 8000612:	e047      	b.n	80006a4 <eea+0xbc>
        int deg_u = poly_degree(u);
 8000614:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000616:	f7ff ffab 	bl	8000570 <poly_degree>
 800061a:	4603      	mov	r3, r0
 800061c:	61bb      	str	r3, [r7, #24]
        int deg_v = poly_degree(v);
 800061e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000620:	f7ff ffa6 	bl	8000570 <poly_degree>
 8000624:	4603      	mov	r3, r0
 8000626:	617b      	str	r3, [r7, #20]

        if (u == 1)
 8000628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800062a:	2b01      	cmp	r3, #1
 800062c:	d03e      	beq.n	80006ac <eea+0xc4>
            break;

        if (deg_u < deg_v) {
 800062e:	69ba      	ldr	r2, [r7, #24]
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	429a      	cmp	r2, r3
 8000634:	da15      	bge.n	8000662 <eea+0x7a>
            // Swap u and v
            u32 temp_u = u; u = v; v = temp_u;
 8000636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800063c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800063e:	693b      	ldr	r3, [r7, #16]
 8000640:	62bb      	str	r3, [r7, #40]	@ 0x28
            // Swap g1 and g2
            u32 temp_g = g1; g1 = g2; g2 = temp_g;
 8000642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	6a3b      	ldr	r3, [r7, #32]
 8000648:	627b      	str	r3, [r7, #36]	@ 0x24
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	623b      	str	r3, [r7, #32]
            deg_u = poly_degree(u);
 800064e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000650:	f7ff ff8e 	bl	8000570 <poly_degree>
 8000654:	4603      	mov	r3, r0
 8000656:	61bb      	str	r3, [r7, #24]
            deg_v = poly_degree(v);
 8000658:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800065a:	f7ff ff89 	bl	8000570 <poly_degree>
 800065e:	4603      	mov	r3, r0
 8000660:	617b      	str	r3, [r7, #20]
        }

        u8 shift = deg_u - deg_v;
 8000662:	69bb      	ldr	r3, [r7, #24]
 8000664:	b2da      	uxtb	r2, r3
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	1ad3      	subs	r3, r2, r3
 800066c:	72fb      	strb	r3, [r7, #11]

        // u = u + v * x^shift
        u ^= v << shift;
 800066e:	7afb      	ldrb	r3, [r7, #11]
 8000670:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000672:	fa02 f303 	lsl.w	r3, r2, r3
 8000676:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000678:	4053      	eors	r3, r2
 800067a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        gf_mod(u);
 800067c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800067e:	b2db      	uxtb	r3, r3
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ff8d 	bl	80005a0 <gf_mod>
        // g1 = g1 + g2 * x^shift
        g1 ^= g2 << shift;
 8000686:	7afb      	ldrb	r3, [r7, #11]
 8000688:	6a3a      	ldr	r2, [r7, #32]
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000690:	4053      	eors	r3, r2
 8000692:	627b      	str	r3, [r7, #36]	@ 0x24
        gf_mod(g1);
 8000694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000696:	b2db      	uxtb	r3, r3
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ff81 	bl	80005a0 <gf_mod>
    for (int i = 0; i < 8; i++) {
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	3301      	adds	r3, #1
 80006a2:	61fb      	str	r3, [r7, #28]
 80006a4:	69fb      	ldr	r3, [r7, #28]
 80006a6:	2b07      	cmp	r3, #7
 80006a8:	ddb4      	ble.n	8000614 <eea+0x2c>
 80006aa:	e000      	b.n	80006ae <eea+0xc6>
            break;
 80006ac:	bf00      	nop
    }

    return (u8)g1;
 80006ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006b0:	b2db      	uxtb	r3, r3
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3730      	adds	r7, #48	@ 0x30
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	bool START_FLAG = True;
 80006c2:	2301      	movs	r3, #1
 80006c4:	72bb      	strb	r3, [r7, #10]
	int num_input;
	u8 tmp[8] = { 0x00, };
 80006c6:	2300      	movs	r3, #0
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	2300      	movs	r3, #0
 80006cc:	607b      	str	r3, [r7, #4]
	u8 num = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	72fb      	strb	r3, [r7, #11]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006d2:	f000 fd45 	bl	8001160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
	SystemClock_Config();
 80006d6:	f000 f899 	bl	800080c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006da:	f000 f8f5 	bl	80008c8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
	TextlcdInit();
 80006de:	f000 fce3 	bl	80010a8 <TextlcdInit>
	clearScreen(ALL_LINE);
 80006e2:	2000      	movs	r0, #0
 80006e4:	f000 fc79 	bl	8000fda <clearScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1) {
		num = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	72fb      	strb	r3, [r7, #11]
		num_input = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]

		if(START_FLAG == True) {
 80006f0:	7abb      	ldrb	r3, [r7, #10]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d152      	bne.n	800079c <main+0xe0>
			START_FLAG == False;
			clearScreen(0);
 80006f6:	2000      	movs	r0, #0
 80006f8:	f000 fc6f 	bl	8000fda <clearScreen>
			writeTextLine(LINE_1, "EEA  >> ");
 80006fc:	493c      	ldr	r1, [pc, #240]	@ (80007f0 <main+0x134>)
 80006fe:	2001      	movs	r0, #1
 8000700:	f000 fcd8 	bl	80010b4 <writeTextLine>
		}


		while (num_input < 2) {
 8000704:	e04a      	b.n	800079c <main+0xe0>
			if(INPUT_FLAG == True) {
 8000706:	4b3b      	ldr	r3, [pc, #236]	@ (80007f4 <main+0x138>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d143      	bne.n	8000796 <main+0xda>
				INPUT_FLAG = False;
 800070e:	4b39      	ldr	r3, [pc, #228]	@ (80007f4 <main+0x138>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
				if(num_input == 0) num = input & 0x0f;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d105      	bne.n	8000726 <main+0x6a>
 800071a:	4b37      	ldr	r3, [pc, #220]	@ (80007f8 <main+0x13c>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	f003 030f 	and.w	r3, r3, #15
 8000722:	72fb      	strb	r3, [r7, #11]
 8000724:	e00b      	b.n	800073e <main+0x82>
				else num = (num << 4) | (input & 0x0F);
 8000726:	7afb      	ldrb	r3, [r7, #11]
 8000728:	011b      	lsls	r3, r3, #4
 800072a:	b25a      	sxtb	r2, r3
 800072c:	4b32      	ldr	r3, [pc, #200]	@ (80007f8 <main+0x13c>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	b25b      	sxtb	r3, r3
 8000732:	f003 030f 	and.w	r3, r3, #15
 8000736:	b25b      	sxtb	r3, r3
 8000738:	4313      	orrs	r3, r2
 800073a:	b25b      	sxtb	r3, r3
 800073c:	72fb      	strb	r3, [r7, #11]

				//num ^= (num_input % 2 == 1) ? (input << 4) : input;

			    sprintf(tmp, "1.0x%02x", num);
 800073e:	7afa      	ldrb	r2, [r7, #11]
 8000740:	463b      	mov	r3, r7
 8000742:	492e      	ldr	r1, [pc, #184]	@ (80007fc <main+0x140>)
 8000744:	4618      	mov	r0, r3
 8000746:	f001 fcbd 	bl	80020c4 <siprintf>
				writeTextLine(LINE_2, tmp);
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	2002      	movs	r0, #2
 8000750:	f000 fcb0 	bl	80010b4 <writeTextLine>

				if (num_input % 2 == 0 && num_input != 0) {
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	2b00      	cmp	r3, #0
 800075c:	d114      	bne.n	8000788 <main+0xcc>
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d011      	beq.n	8000788 <main+0xcc>
					sprintf(tmp, "2.0x%02x", num);
 8000764:	7afa      	ldrb	r2, [r7, #11]
 8000766:	463b      	mov	r3, r7
 8000768:	4925      	ldr	r1, [pc, #148]	@ (8000800 <main+0x144>)
 800076a:	4618      	mov	r0, r3
 800076c:	f001 fcaa 	bl	80020c4 <siprintf>
					writeTextLine(LINE_2, tmp);
 8000770:	463b      	mov	r3, r7
 8000772:	4619      	mov	r1, r3
 8000774:	2002      	movs	r0, #2
 8000776:	f000 fc9d 	bl	80010b4 <writeTextLine>

					HAL_Delay(1000);
 800077a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800077e:	f000 fd61 	bl	8001244 <HAL_Delay>
					clearScreen(LINE_2);
 8000782:	2002      	movs	r0, #2
 8000784:	f000 fc29 	bl	8000fda <clearScreen>

				}
				num_input++;
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	3301      	adds	r3, #1
 800078c:	60fb      	str	r3, [r7, #12]
				HAL_Delay(300);
 800078e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000792:	f000 fd57 	bl	8001244 <HAL_Delay>
			}
			HAL_Delay(100);
 8000796:	2064      	movs	r0, #100	@ 0x64
 8000798:	f000 fd54 	bl	8001244 <HAL_Delay>
		while (num_input < 2) {
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	ddb1      	ble.n	8000706 <main+0x4a>
		}
		clearScreen(ALL_LINE);
 80007a2:	2000      	movs	r0, #0
 80007a4:	f000 fc19 	bl	8000fda <clearScreen>
		sprintf(tmp, "inv(%02x)", num);
 80007a8:	7afa      	ldrb	r2, [r7, #11]
 80007aa:	463b      	mov	r3, r7
 80007ac:	4915      	ldr	r1, [pc, #84]	@ (8000804 <main+0x148>)
 80007ae:	4618      	mov	r0, r3
 80007b0:	f001 fc88 	bl	80020c4 <siprintf>
		writeTextLine(LINE_1, tmp);
 80007b4:	463b      	mov	r3, r7
 80007b6:	4619      	mov	r1, r3
 80007b8:	2001      	movs	r0, #1
 80007ba:	f000 fc7b 	bl	80010b4 <writeTextLine>
		sprintf(tmp, "-> 0x%02x", eea(num));
 80007be:	7afb      	ldrb	r3, [r7, #11]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff11 	bl	80005e8 <eea>
 80007c6:	4603      	mov	r3, r0
 80007c8:	461a      	mov	r2, r3
 80007ca:	463b      	mov	r3, r7
 80007cc:	490e      	ldr	r1, [pc, #56]	@ (8000808 <main+0x14c>)
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 fc78 	bl	80020c4 <siprintf>
		writeTextLine(LINE_2, tmp);
 80007d4:	463b      	mov	r3, r7
 80007d6:	4619      	mov	r1, r3
 80007d8:	2002      	movs	r0, #2
 80007da:	f000 fc6b 	bl	80010b4 <writeTextLine>

		num = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	72fb      	strb	r3, [r7, #11]
		num_input = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]

		HAL_Delay(2500);
 80007e6:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80007ea:	f000 fd2b 	bl	8001244 <HAL_Delay>
		num = 0;
 80007ee:	e77b      	b.n	80006e8 <main+0x2c>
 80007f0:	08002a54 	.word	0x08002a54
 80007f4:	20000078 	.word	0x20000078
 80007f8:	20000079 	.word	0x20000079
 80007fc:	08002a60 	.word	0x08002a60
 8000800:	08002a6c 	.word	0x08002a6c
 8000804:	08002a78 	.word	0x08002a78
 8000808:	08002a84 	.word	0x08002a84

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b094      	sub	sp, #80	@ 0x50
 8000810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	f107 0320 	add.w	r3, r7, #32
 8000816:	2230      	movs	r2, #48	@ 0x30
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f001 fc85 	bl	800212a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	4b22      	ldr	r3, [pc, #136]	@ (80008c0 <SystemClock_Config+0xb4>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000838:	4a21      	ldr	r2, [pc, #132]	@ (80008c0 <SystemClock_Config+0xb4>)
 800083a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800083e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000840:	4b1f      	ldr	r3, [pc, #124]	@ (80008c0 <SystemClock_Config+0xb4>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000844:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	4b1c      	ldr	r3, [pc, #112]	@ (80008c4 <SystemClock_Config+0xb8>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a1b      	ldr	r2, [pc, #108]	@ (80008c4 <SystemClock_Config+0xb8>)
 8000856:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800085a:	6013      	str	r3, [r2, #0]
 800085c:	4b19      	ldr	r3, [pc, #100]	@ (80008c4 <SystemClock_Config+0xb8>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000868:	2302      	movs	r3, #2
 800086a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800086c:	2301      	movs	r3, #1
 800086e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000870:	2310      	movs	r3, #16
 8000872:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000874:	2300      	movs	r3, #0
 8000876:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000878:	f107 0320 	add.w	r3, r7, #32
 800087c:	4618      	mov	r0, r3
 800087e:	f000 fffd 	bl	800187c <HAL_RCC_OscConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000888:	f000 f8f4 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088c:	230f      	movs	r3, #15
 800088e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000890:	2300      	movs	r3, #0
 8000892:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 fa60 	bl	8001d6c <HAL_RCC_ClockConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80008b2:	f000 f8df 	bl	8000a74 <Error_Handler>
  }
}
 80008b6:	bf00      	nop
 80008b8:	3750      	adds	r7, #80	@ 0x50
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40007000 	.word	0x40007000

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	4b4d      	ldr	r3, [pc, #308]	@ (8000a18 <MX_GPIO_Init+0x150>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a4c      	ldr	r2, [pc, #304]	@ (8000a18 <MX_GPIO_Init+0x150>)
 80008e8:	f043 0310 	orr.w	r3, r3, #16
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b4a      	ldr	r3, [pc, #296]	@ (8000a18 <MX_GPIO_Init+0x150>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0310 	and.w	r3, r3, #16
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b46      	ldr	r3, [pc, #280]	@ (8000a18 <MX_GPIO_Init+0x150>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a45      	ldr	r2, [pc, #276]	@ (8000a18 <MX_GPIO_Init+0x150>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b43      	ldr	r3, [pc, #268]	@ (8000a18 <MX_GPIO_Init+0x150>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b3f      	ldr	r3, [pc, #252]	@ (8000a18 <MX_GPIO_Init+0x150>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a3e      	ldr	r2, [pc, #248]	@ (8000a18 <MX_GPIO_Init+0x150>)
 8000920:	f043 0308 	orr.w	r3, r3, #8
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b3c      	ldr	r3, [pc, #240]	@ (8000a18 <MX_GPIO_Init+0x150>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0308 	and.w	r3, r3, #8
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000932:	2200      	movs	r2, #0
 8000934:	213f      	movs	r1, #63	@ 0x3f
 8000936:	4839      	ldr	r0, [pc, #228]	@ (8000a1c <MX_GPIO_Init+0x154>)
 8000938:	f000 ff6e 	bl	8001818 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800093c:	2200      	movs	r2, #0
 800093e:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8000942:	4837      	ldr	r0, [pc, #220]	@ (8000a20 <MX_GPIO_Init+0x158>)
 8000944:	f000 ff68 	bl	8001818 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000948:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800094c:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	4619      	mov	r1, r3
 800095e:	4831      	ldr	r0, [pc, #196]	@ (8000a24 <MX_GPIO_Init+0x15c>)
 8000960:	f000 fda6 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000964:	233f      	movs	r3, #63	@ 0x3f
 8000966:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	4619      	mov	r1, r3
 800097a:	4828      	ldr	r0, [pc, #160]	@ (8000a1c <MX_GPIO_Init+0x154>)
 800097c:	f000 fd98 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000980:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000984:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	4619      	mov	r1, r3
 8000998:	4821      	ldr	r0, [pc, #132]	@ (8000a20 <MX_GPIO_Init+0x158>)
 800099a:	f000 fd89 	bl	80014b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	2006      	movs	r0, #6
 80009a4:	f000 fd4d 	bl	8001442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009a8:	2006      	movs	r0, #6
 80009aa:	f000 fd66 	bl	800147a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2100      	movs	r1, #0
 80009b2:	2007      	movs	r0, #7
 80009b4:	f000 fd45 	bl	8001442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80009b8:	2007      	movs	r0, #7
 80009ba:	f000 fd5e 	bl	800147a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2100      	movs	r1, #0
 80009c2:	2008      	movs	r0, #8
 80009c4:	f000 fd3d 	bl	8001442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80009c8:	2008      	movs	r0, #8
 80009ca:	f000 fd56 	bl	800147a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2100      	movs	r1, #0
 80009d2:	2009      	movs	r0, #9
 80009d4:	f000 fd35 	bl	8001442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80009d8:	2009      	movs	r0, #9
 80009da:	f000 fd4e 	bl	800147a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	200a      	movs	r0, #10
 80009e4:	f000 fd2d 	bl	8001442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80009e8:	200a      	movs	r0, #10
 80009ea:	f000 fd46 	bl	800147a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2100      	movs	r1, #0
 80009f2:	2017      	movs	r0, #23
 80009f4:	f000 fd25 	bl	8001442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009f8:	2017      	movs	r0, #23
 80009fa:	f000 fd3e 	bl	800147a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2100      	movs	r1, #0
 8000a02:	2028      	movs	r0, #40	@ 0x28
 8000a04:	f000 fd1d 	bl	8001442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a08:	2028      	movs	r0, #40	@ 0x28
 8000a0a:	f000 fd36 	bl	800147a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a0e:	bf00      	nop
 8000a10:	3720      	adds	r7, #32
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40020800 	.word	0x40020800
 8000a20:	40020c00 	.word	0x40020c00
 8000a24:	40021000 	.word	0x40021000

08000a28 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 16; i++)
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	e00f      	b.n	8000a58 <HAL_GPIO_EXTI_Callback+0x30>
	{
		if ((GPIO_Pin >> i) == 0x0001)
 8000a38:	88fa      	ldrh	r2, [r7, #6]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	fa42 f303 	asr.w	r3, r2, r3
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d106      	bne.n	8000a52 <HAL_GPIO_EXTI_Callback+0x2a>
		{
			input = i;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <HAL_GPIO_EXTI_Callback+0x44>)
 8000a4a:	701a      	strb	r2, [r3, #0]
			INPUT_FLAG = True;
 8000a4c:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <HAL_GPIO_EXTI_Callback+0x48>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	3301      	adds	r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	2b0f      	cmp	r3, #15
 8000a5c:	ddec      	ble.n	8000a38 <HAL_GPIO_EXTI_Callback+0x10>
		}
	}
}
 8000a5e:	bf00      	nop
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	20000079 	.word	0x20000079
 8000a70:	20000078 	.word	0x20000078

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <Error_Handler+0x8>

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <HAL_MspInit+0x4c>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000acc <HAL_MspInit+0x4c>)
 8000a90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a96:	4b0d      	ldr	r3, [pc, #52]	@ (8000acc <HAL_MspInit+0x4c>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <HAL_MspInit+0x4c>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aaa:	4a08      	ldr	r2, [pc, #32]	@ (8000acc <HAL_MspInit+0x4c>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab2:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <HAL_MspInit+0x4c>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <NMI_Handler+0x4>

08000ad8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b26:	f000 fb6d 	bl	8001204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b32:	2001      	movs	r0, #1
 8000b34:	f000 fe8a 	bl	800184c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000b40:	2002      	movs	r0, #2
 8000b42:	f000 fe83 	bl	800184c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000b4e:	2004      	movs	r0, #4
 8000b50:	f000 fe7c 	bl	800184c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000b5c:	2008      	movs	r0, #8
 8000b5e:	f000 fe75 	bl	800184c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000b6a:	2010      	movs	r0, #16
 8000b6c:	f000 fe6e 	bl	800184c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000b78:	2020      	movs	r0, #32
 8000b7a:	f000 fe67 	bl	800184c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000b7e:	2040      	movs	r0, #64	@ 0x40
 8000b80:	f000 fe64 	bl	800184c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000b84:	2080      	movs	r0, #128	@ 0x80
 8000b86:	f000 fe61 	bl	800184c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000b8a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000b8e:	f000 fe5d 	bl	800184c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000b92:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b96:	f000 fe59 	bl	800184c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000ba2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000ba6:	f000 fe51 	bl	800184c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000baa:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000bae:	f000 fe4d 	bl	800184c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000bb2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000bb6:	f000 fe49 	bl	800184c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000bba:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000bbe:	f000 fe45 	bl	800184c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000bc2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000bc6:	f000 fe41 	bl	800184c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000bca:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000bce:	f000 fe3d 	bl	800184c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be0:	4a14      	ldr	r2, [pc, #80]	@ (8000c34 <_sbrk+0x5c>)
 8000be2:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <_sbrk+0x60>)
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bec:	4b13      	ldr	r3, [pc, #76]	@ (8000c3c <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d102      	bne.n	8000bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <_sbrk+0x64>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	@ (8000c40 <_sbrk+0x68>)
 8000bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfa:	4b10      	ldr	r3, [pc, #64]	@ (8000c3c <_sbrk+0x64>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d207      	bcs.n	8000c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c08:	f001 fa98 	bl	800213c <__errno>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	220c      	movs	r2, #12
 8000c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c16:	e009      	b.n	8000c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c18:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <_sbrk+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c1e:	4b07      	ldr	r3, [pc, #28]	@ (8000c3c <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	4a05      	ldr	r2, [pc, #20]	@ (8000c3c <_sbrk+0x64>)
 8000c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20020000 	.word	0x20020000
 8000c38:	00000400 	.word	0x00000400
 8000c3c:	2000007c 	.word	0x2000007c
 8000c40:	200001d0 	.word	0x200001d0

08000c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <SystemInit+0x20>)
 8000c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c4e:	4a05      	ldr	r2, [pc, #20]	@ (8000c64 <SystemInit+0x20>)
 8000c50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <dataportDirectionOut>:
#define RS_LOW   {HAL_GPIO_WritePin(LCD_SIGNAL_CON, (0x0100 << LCD_RS), GPIO_PIN_RESET);HAL_Delay(1);}

// 4)
// TRUE=> out  , FALSE => In
void dataportDirectionOut(int bTrue)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]

  if ( bTrue)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d008      	beq.n	8000c98 <dataportDirectionOut+0x30>
  {
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c86:	23ff      	movs	r3, #255	@ 0xff
 8000c88:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61bb      	str	r3, [r7, #24]
 8000c96:	e005      	b.n	8000ca4 <dataportDirectionOut+0x3c>
  }
  else
  {
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c98:	23ff      	movs	r3, #255	@ 0xff
 8000c9a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
  }
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca4:	f107 030c 	add.w	r3, r7, #12
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4803      	ldr	r0, [pc, #12]	@ (8000cb8 <dataportDirectionOut+0x50>)
 8000cac:	f000 fc00 	bl	80014b0 <HAL_GPIO_Init>
}
 8000cb0:	bf00      	nop
 8000cb2:	3720      	adds	r7, #32
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40020800 	.word	0x40020800

08000cbc <IsBusy>:

// 5)
int IsBusy()
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
  int  rdata;
  dataportDirectionOut(FALSE);  // dataport mode: input set
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f7ff ffd0 	bl	8000c68 <dataportDirectionOut>
  RW_HIGH
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cce:	481e      	ldr	r0, [pc, #120]	@ (8000d48 <IsBusy+0x8c>)
 8000cd0:	f000 fda2 	bl	8001818 <HAL_GPIO_WritePin>
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f000 fab5 	bl	8001244 <HAL_Delay>
  RS_LOW
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ce0:	4819      	ldr	r0, [pc, #100]	@ (8000d48 <IsBusy+0x8c>)
 8000ce2:	f000 fd99 	bl	8001818 <HAL_GPIO_WritePin>
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f000 faac 	bl	8001244 <HAL_Delay>

  E_HIGH
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cf2:	4815      	ldr	r0, [pc, #84]	@ (8000d48 <IsBusy+0x8c>)
 8000cf4:	f000 fd90 	bl	8001818 <HAL_GPIO_WritePin>
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f000 faa3 	bl	8001244 <HAL_Delay>

  rdata = HAL_GPIO_ReadPin(LCD_DATA_CON, (0x0001 << BUSY_BIT_nTH)); // data port read
 8000cfe:	2180      	movs	r1, #128	@ 0x80
 8000d00:	4812      	ldr	r0, [pc, #72]	@ (8000d4c <IsBusy+0x90>)
 8000d02:	f000 fd71 	bl	80017e8 <HAL_GPIO_ReadPin>
 8000d06:	4603      	mov	r3, r0
 8000d08:	607b      	str	r3, [r7, #4]
  E_LOW
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d10:	480d      	ldr	r0, [pc, #52]	@ (8000d48 <IsBusy+0x8c>)
 8000d12:	f000 fd81 	bl	8001818 <HAL_GPIO_WritePin>
 8000d16:	2001      	movs	r0, #1
 8000d18:	f000 fa94 	bl	8001244 <HAL_Delay>

  RW_LOW
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d22:	4809      	ldr	r0, [pc, #36]	@ (8000d48 <IsBusy+0x8c>)
 8000d24:	f000 fd78 	bl	8001818 <HAL_GPIO_WritePin>
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f000 fa8b 	bl	8001244 <HAL_Delay>

  if (rdata & Busy_Flag)       // Busy Flag(BF) bit check 
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f003 0310 	and.w	r3, r3, #16
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <IsBusy+0x80>
    return TRUE;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e000      	b.n	8000d3e <IsBusy+0x82>

  return FALSE;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40020c00 	.word	0x40020c00
 8000d4c:	40020800 	.word	0x40020800

08000d50 <writeDataPort>:

// 6)
void writeDataPort(int nData)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  int i;
  for ( i = 0; i < 8 ; i++)
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	e01f      	b.n	8000d9e <writeDataPort+0x4e>
  {
    if ( (nData>>i) & 1 )
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	fa42 f303 	asr.w	r3, r2, r3
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d00a      	beq.n	8000d84 <writeDataPort+0x34>

      HAL_GPIO_WritePin(LCD_DATA_CON, (0x0001 << i), GPIO_PIN_SET);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	480c      	ldr	r0, [pc, #48]	@ (8000db0 <writeDataPort+0x60>)
 8000d7e:	f000 fd4b 	bl	8001818 <HAL_GPIO_WritePin>
 8000d82:	e009      	b.n	8000d98 <writeDataPort+0x48>
    else
      HAL_GPIO_WritePin(LCD_DATA_CON, (0x0001 << i), GPIO_PIN_RESET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	2200      	movs	r2, #0
 8000d90:	4619      	mov	r1, r3
 8000d92:	4807      	ldr	r0, [pc, #28]	@ (8000db0 <writeDataPort+0x60>)
 8000d94:	f000 fd40 	bl	8001818 <HAL_GPIO_WritePin>
  for ( i = 0; i < 8 ; i++)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	2b07      	cmp	r3, #7
 8000da2:	dddc      	ble.n	8000d5e <writeDataPort+0xe>
  } 
}
 8000da4:	bf00      	nop
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40020800 	.word	0x40020800

08000db4 <writeCmd>:

// 7)
int writeCmd(int nCmd)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if ( IsBusy())
 8000dbc:	f7ff ff7e 	bl	8000cbc <IsBusy>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <writeCmd+0x16>
    return FALSE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e02d      	b.n	8000e26 <writeCmd+0x72>

  dataportDirectionOut(TRUE); // dataport output
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f7ff ff4c 	bl	8000c68 <dataportDirectionOut>
  
  RW_LOW
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dd6:	4816      	ldr	r0, [pc, #88]	@ (8000e30 <writeCmd+0x7c>)
 8000dd8:	f000 fd1e 	bl	8001818 <HAL_GPIO_WritePin>
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f000 fa31 	bl	8001244 <HAL_Delay>
    
  RS_LOW
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000de8:	4811      	ldr	r0, [pc, #68]	@ (8000e30 <writeCmd+0x7c>)
 8000dea:	f000 fd15 	bl	8001818 <HAL_GPIO_WritePin>
 8000dee:	2001      	movs	r0, #1
 8000df0:	f000 fa28 	bl	8001244 <HAL_Delay>
    
  writeDataPort(nCmd);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff ffab 	bl	8000d50 <writeDataPort>

  E_HIGH
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e00:	480b      	ldr	r0, [pc, #44]	@ (8000e30 <writeCmd+0x7c>)
 8000e02:	f000 fd09 	bl	8001818 <HAL_GPIO_WritePin>
 8000e06:	2001      	movs	r0, #1
 8000e08:	f000 fa1c 	bl	8001244 <HAL_Delay>

  E_LOW
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e12:	4807      	ldr	r0, [pc, #28]	@ (8000e30 <writeCmd+0x7c>)
 8000e14:	f000 fd00 	bl	8001818 <HAL_GPIO_WritePin>
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f000 fa13 	bl	8001244 <HAL_Delay>
    
  dataportDirectionOut(FALSE); // dataport input
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f7ff ff22 	bl	8000c68 <dataportDirectionOut>

  return TRUE;
 8000e24:	2301      	movs	r3, #1
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40020c00 	.word	0x40020c00

08000e34 <setDDRAMAddr>:

// 8)
int setDDRAMAddr(int x , int y)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  int cmd = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
  if(IsBusy())
 8000e42:	f7ff ff3b 	bl	8000cbc <IsBusy>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <setDDRAMAddr+0x1c>
    return FALSE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	e022      	b.n	8000e96 <setDDRAMAddr+0x62>

  if ( y == 1 )
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d102      	bne.n	8000e5c <setDDRAMAddr+0x28>
    cmd = DDRAM_ADDR_LINE_1 +x;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	e008      	b.n	8000e6e <setDDRAMAddr+0x3a>
  else if(y == 2 )
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d103      	bne.n	8000e6a <setDDRAMAddr+0x36>
    cmd = DDRAM_ADDR_LINE_2 +x;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3340      	adds	r3, #64	@ 0x40
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	e001      	b.n	8000e6e <setDDRAMAddr+0x3a>
  else
    return FALSE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e013      	b.n	8000e96 <setDDRAMAddr+0x62>

  if ( cmd >= 0x80)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e72:	dd01      	ble.n	8000e78 <setDDRAMAddr+0x44>
    return FALSE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	e00e      	b.n	8000e96 <setDDRAMAddr+0x62>

  if (!writeCmd(cmd | SET_DDRAM_ADD_DEF))
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ff98 	bl	8000db4 <writeCmd>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <setDDRAMAddr+0x5a>
    return FALSE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e003      	b.n	8000e96 <setDDRAMAddr+0x62>

  HAL_Delay(1);
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f000 f9d8 	bl	8001244 <HAL_Delay>
  return TRUE;
 8000e94:	2301      	movs	r3, #1
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <displayMode>:

// 9)
int displayMode(int bCursor, int bCursorblink, int blcd  )
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	60f8      	str	r0, [r7, #12]
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
  int cmd  = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]

  if ( bCursor)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <displayMode+0x1a>
    cmd = DIS_CURSOR;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	617b      	str	r3, [r7, #20]

  if (bCursorblink )
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <displayMode+0x28>
    cmd |= DIS_CUR_BLINK;
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	617b      	str	r3, [r7, #20]

  if ( blcd )
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d003      	beq.n	8000ed4 <displayMode+0x36>
    cmd |= DIS_LCD;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	f043 0304 	orr.w	r3, r3, #4
 8000ed2:	617b      	str	r3, [r7, #20]

  if (!writeCmd(cmd | DIS_DEF))
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	f043 0308 	orr.w	r3, r3, #8
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff6a 	bl	8000db4 <writeCmd>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <displayMode+0x4c>
    return FALSE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e000      	b.n	8000eec <displayMode+0x4e>

  return TRUE;
 8000eea:	2301      	movs	r3, #1
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <writeCh>:

// 10)
int writeCh(int ch)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if ( IsBusy())
 8000efc:	f7ff fede 	bl	8000cbc <IsBusy>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <writeCh+0x16>
    return FALSE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e027      	b.n	8000f5a <writeCh+0x66>

  dataportDirectionOut(TRUE); // dataport output
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	f7ff feac 	bl	8000c68 <dataportDirectionOut>

  writeDataPort(ch);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ff1d 	bl	8000d50 <writeDataPort>
  
  RS_HIGH
 8000f16:	2201      	movs	r2, #1
 8000f18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f1c:	4811      	ldr	r0, [pc, #68]	@ (8000f64 <writeCh+0x70>)
 8000f1e:	f000 fc7b 	bl	8001818 <HAL_GPIO_WritePin>
 8000f22:	2001      	movs	r0, #1
 8000f24:	f000 f98e 	bl	8001244 <HAL_Delay>

  E_HIGH
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f2e:	480d      	ldr	r0, [pc, #52]	@ (8000f64 <writeCh+0x70>)
 8000f30:	f000 fc72 	bl	8001818 <HAL_GPIO_WritePin>
 8000f34:	2001      	movs	r0, #1
 8000f36:	f000 f985 	bl	8001244 <HAL_Delay>

  E_LOW
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f40:	4808      	ldr	r0, [pc, #32]	@ (8000f64 <writeCh+0x70>)
 8000f42:	f000 fc69 	bl	8001818 <HAL_GPIO_WritePin>
 8000f46:	2001      	movs	r0, #1
 8000f48:	f000 f97c 	bl	8001244 <HAL_Delay>

  HAL_Delay(1);
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f000 f979 	bl	8001244 <HAL_Delay>
  dataportDirectionOut(FALSE); // dataport input
 8000f52:	2000      	movs	r0, #0
 8000f54:	f7ff fe88 	bl	8000c68 <dataportDirectionOut>
  
  return TRUE;
 8000f58:	2301      	movs	r3, #1
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40020c00 	.word	0x40020c00

08000f68 <functionSet>:
  return TRUE;
}

// 11)
int functionSet(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
  int cmd = 0x0038; // 5*8 dot charater , 8bit interface , 2 line
 8000f6e:	2338      	movs	r3, #56	@ 0x38
 8000f70:	607b      	str	r3, [r7, #4]

  if (!writeCmd(cmd))
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ff1e 	bl	8000db4 <writeCmd>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <functionSet+0x1a>
    return FALSE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e000      	b.n	8000f84 <functionSet+0x1c>
  return TRUE;
 8000f82:	2301      	movs	r3, #1
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <writeStr>:

// 12)
int writeStr(char* str)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  int cdata;
  int i;
  for(i =0; i < strlen(str) ;i++ )
 8000f94:	2300      	movs	r3, #0
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	e013      	b.n	8000fc2 <writeStr+0x36>
  {
    if (str[i] == '_')
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b5f      	cmp	r3, #95	@ 0x5f
 8000fa4:	d102      	bne.n	8000fac <writeStr+0x20>
      cdata = (int)' ';
 8000fa6:	2320      	movs	r3, #32
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	e004      	b.n	8000fb6 <writeStr+0x2a>
    else
      cdata = (int)str[i];
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	60fb      	str	r3, [r7, #12]
    writeCh(cdata);
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f7ff ff9c 	bl	8000ef4 <writeCh>
  for(i =0; i < strlen(str) ;i++ )
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff f904 	bl	80001d0 <strlen>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d8e4      	bhi.n	8000f9a <writeStr+0xe>
  }
  return TRUE;
 8000fd0:	2301      	movs	r3, #1
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <clearScreen>:

// 13)
// 0=> all line, 1= 1th line , 2 = 2th line
int clearScreen(int nline)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b084      	sub	sp, #16
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  int i;
  if (nline == ALL_LINE)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d110      	bne.n	800100a <clearScreen+0x30>
  {
    if(IsBusy())                // Busy Flag Check
 8000fe8:	f7ff fe68 	bl	8000cbc <IsBusy>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <clearScreen+0x1c>
      return FALSE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e039      	b.n	800106a <clearScreen+0x90>

    if (!writeCmd(CLEAR_DISPLAY))       // clear display 실행 여부
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f7ff fedc 	bl	8000db4 <writeCmd>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d101      	bne.n	8001006 <clearScreen+0x2c>
      return FALSE;
 8001002:	2300      	movs	r3, #0
 8001004:	e031      	b.n	800106a <clearScreen+0x90>

    return TRUE;
 8001006:	2301      	movs	r3, #1
 8001008:	e02f      	b.n	800106a <clearScreen+0x90>
  }
  else if (nline == LINE_1)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d114      	bne.n	800103a <clearScreen+0x60>
  {
    setDDRAMAddr(0,1);          // 0x80 - Set DDRAM Address
 8001010:	2101      	movs	r1, #1
 8001012:	2000      	movs	r0, #0
 8001014:	f7ff ff0e 	bl	8000e34 <setDDRAMAddr>
    for(i = 0; i <= COLUMN_NUM ;i++ )
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	e005      	b.n	800102a <clearScreen+0x50>
      writeCh((unsigned char)' ');
 800101e:	2020      	movs	r0, #32
 8001020:	f7ff ff68 	bl	8000ef4 <writeCh>
    for(i = 0; i <= COLUMN_NUM ;i++ )
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3301      	adds	r3, #1
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2b10      	cmp	r3, #16
 800102e:	ddf6      	ble.n	800101e <clearScreen+0x44>

    setDDRAMAddr(0,1);
 8001030:	2101      	movs	r1, #1
 8001032:	2000      	movs	r0, #0
 8001034:	f7ff fefe 	bl	8000e34 <setDDRAMAddr>
 8001038:	e016      	b.n	8001068 <clearScreen+0x8e>
  }
  else if (nline == LINE_2)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b02      	cmp	r3, #2
 800103e:	d113      	bne.n	8001068 <clearScreen+0x8e>
  {
    setDDRAMAddr(0,2);          // 0xC0 - Move into 2nd Line
 8001040:	2102      	movs	r1, #2
 8001042:	2000      	movs	r0, #0
 8001044:	f7ff fef6 	bl	8000e34 <setDDRAMAddr>

    for(i = 0; i <= COLUMN_NUM ;i++ )
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	e005      	b.n	800105a <clearScreen+0x80>
      writeCh((unsigned char)' ');
 800104e:	2020      	movs	r0, #32
 8001050:	f7ff ff50 	bl	8000ef4 <writeCh>
    for(i = 0; i <= COLUMN_NUM ;i++ )
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	3301      	adds	r3, #1
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2b10      	cmp	r3, #16
 800105e:	ddf6      	ble.n	800104e <clearScreen+0x74>

    setDDRAMAddr(0,2);
 8001060:	2102      	movs	r1, #2
 8001062:	2000      	movs	r0, #0
 8001064:	f7ff fee6 	bl	8000e34 <setDDRAMAddr>
  }
  return TRUE;
 8001068:	2301      	movs	r3, #1
}
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <initlcd>:

// 14)
int initlcd(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  E_LOW
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800107e:	4809      	ldr	r0, [pc, #36]	@ (80010a4 <initlcd+0x30>)
 8001080:	f000 fbca 	bl	8001818 <HAL_GPIO_WritePin>
 8001084:	2001      	movs	r0, #1
 8001086:	f000 f8dd 	bl	8001244 <HAL_Delay>
  
  functionSet();
 800108a:	f7ff ff6d 	bl	8000f68 <functionSet>
  HAL_Delay(1);
 800108e:	2001      	movs	r0, #1
 8001090:	f000 f8d8 	bl	8001244 <HAL_Delay>
  displayMode(1,1,1);
 8001094:	2201      	movs	r2, #1
 8001096:	2101      	movs	r1, #1
 8001098:	2001      	movs	r0, #1
 800109a:	f7ff ff00 	bl	8000e9e <displayMode>

  return 1;
 800109e:	2301      	movs	r3, #1
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40020c00 	.word	0x40020c00

080010a8 <TextlcdInit>:

// 15)
void TextlcdInit()
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  initlcd();
 80010ac:	f7ff ffe2 	bl	8001074 <initlcd>
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <writeTextLine>:

// 16)
// line argument =>must be 1 or 2 . 
int writeTextLine(int line ,const char* str)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  char strWtext[COLUMN_NUM+1];
  if (strlen(str) > COLUMN_NUM )
 80010be:	6838      	ldr	r0, [r7, #0]
 80010c0:	f7ff f886 	bl	80001d0 <strlen>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b10      	cmp	r3, #16
 80010c8:	d909      	bls.n	80010de <writeTextLine+0x2a>
  {
    strncpy(strWtext,str,COLUMN_NUM);
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	2210      	movs	r2, #16
 80010d0:	6839      	ldr	r1, [r7, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f001 f816 	bl	8002104 <strncpy>
    strWtext[COLUMN_NUM] = '\0';
 80010d8:	2300      	movs	r3, #0
 80010da:	773b      	strb	r3, [r7, #28]
 80010dc:	e005      	b.n	80010ea <writeTextLine+0x36>
  }
  else
  {
    strcpy(strWtext,str);
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	6839      	ldr	r1, [r7, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f001 f855 	bl	8002194 <strcpy>
  }
  setDDRAMAddr(0, line);
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	2000      	movs	r0, #0
 80010ee:	f7ff fea1 	bl	8000e34 <setDDRAMAddr>
  HAL_Delay(2);
 80010f2:	2002      	movs	r0, #2
 80010f4:	f000 f8a6 	bl	8001244 <HAL_Delay>
  writeStr(strWtext);
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff45 	bl	8000f8c <writeStr>

  return 1;
 8001102:	2301      	movs	r3, #1
}
 8001104:	4618      	mov	r0, r3
 8001106:	3720      	adds	r7, #32
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800110c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001144 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001110:	f7ff fd98 	bl	8000c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001114:	480c      	ldr	r0, [pc, #48]	@ (8001148 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001116:	490d      	ldr	r1, [pc, #52]	@ (800114c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001118:	4a0d      	ldr	r2, [pc, #52]	@ (8001150 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800111c:	e002      	b.n	8001124 <LoopCopyDataInit>

0800111e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001122:	3304      	adds	r3, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001128:	d3f9      	bcc.n	800111e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112a:	4a0a      	ldr	r2, [pc, #40]	@ (8001154 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800112c:	4c0a      	ldr	r4, [pc, #40]	@ (8001158 <LoopFillZerobss+0x22>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001130:	e001      	b.n	8001136 <LoopFillZerobss>

08001132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001134:	3204      	adds	r2, #4

08001136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001138:	d3fb      	bcc.n	8001132 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800113a:	f001 f805 	bl	8002148 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800113e:	f7ff fabd 	bl	80006bc <main>
  bx  lr    
 8001142:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001144:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800114c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001150:	08002ae4 	.word	0x08002ae4
  ldr r2, =_sbss
 8001154:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001158:	200001cc 	.word	0x200001cc

0800115c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800115c:	e7fe      	b.n	800115c <ADC_IRQHandler>
	...

08001160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001164:	4b0e      	ldr	r3, [pc, #56]	@ (80011a0 <HAL_Init+0x40>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0d      	ldr	r2, [pc, #52]	@ (80011a0 <HAL_Init+0x40>)
 800116a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800116e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001170:	4b0b      	ldr	r3, [pc, #44]	@ (80011a0 <HAL_Init+0x40>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0a      	ldr	r2, [pc, #40]	@ (80011a0 <HAL_Init+0x40>)
 8001176:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800117a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800117c:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <HAL_Init+0x40>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a07      	ldr	r2, [pc, #28]	@ (80011a0 <HAL_Init+0x40>)
 8001182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001188:	2003      	movs	r0, #3
 800118a:	f000 f94f 	bl	800142c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800118e:	200f      	movs	r0, #15
 8001190:	f000 f808 	bl	80011a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001194:	f7ff fc74 	bl	8000a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40023c00 	.word	0x40023c00

080011a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ac:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <HAL_InitTick+0x54>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <HAL_InitTick+0x58>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80011be:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f967 	bl	8001496 <HAL_SYSTICK_Config>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e00e      	b.n	80011f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b0f      	cmp	r3, #15
 80011d6:	d80a      	bhi.n	80011ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d8:	2200      	movs	r2, #0
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011e0:	f000 f92f 	bl	8001442 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e4:	4a06      	ldr	r2, [pc, #24]	@ (8001200 <HAL_InitTick+0x5c>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e000      	b.n	80011f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000000 	.word	0x20000000
 80011fc:	20000008 	.word	0x20000008
 8001200:	20000004 	.word	0x20000004

08001204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <HAL_IncTick+0x20>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_IncTick+0x24>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a04      	ldr	r2, [pc, #16]	@ (8001228 <HAL_IncTick+0x24>)
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000008 	.word	0x20000008
 8001228:	20000080 	.word	0x20000080

0800122c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;
 8001230:	4b03      	ldr	r3, [pc, #12]	@ (8001240 <HAL_GetTick+0x14>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000080 	.word	0x20000080

08001244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800124c:	f7ff ffee 	bl	800122c <HAL_GetTick>
 8001250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800125c:	d005      	beq.n	800126a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125e:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <HAL_Delay+0x44>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4413      	add	r3, r2
 8001268:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800126a:	bf00      	nop
 800126c:	f7ff ffde 	bl	800122c <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	429a      	cmp	r2, r3
 800127a:	d8f7      	bhi.n	800126c <HAL_Delay+0x28>
  {
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000008 	.word	0x20000008

0800128c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800129c:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012a8:	4013      	ands	r3, r2
 80012aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012be:	4a04      	ldr	r2, [pc, #16]	@ (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	60d3      	str	r3, [r2, #12]
}
 80012c4:	bf00      	nop
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d8:	4b04      	ldr	r3, [pc, #16]	@ (80012ec <__NVIC_GetPriorityGrouping+0x18>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	f003 0307 	and.w	r3, r3, #7
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	db0b      	blt.n	800131a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	f003 021f 	and.w	r2, r3, #31
 8001308:	4907      	ldr	r1, [pc, #28]	@ (8001328 <__NVIC_EnableIRQ+0x38>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	095b      	lsrs	r3, r3, #5
 8001310:	2001      	movs	r0, #1
 8001312:	fa00 f202 	lsl.w	r2, r0, r2
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000e100 	.word	0xe000e100

0800132c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	6039      	str	r1, [r7, #0]
 8001336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133c:	2b00      	cmp	r3, #0
 800133e:	db0a      	blt.n	8001356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	b2da      	uxtb	r2, r3
 8001344:	490c      	ldr	r1, [pc, #48]	@ (8001378 <__NVIC_SetPriority+0x4c>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	0112      	lsls	r2, r2, #4
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	440b      	add	r3, r1
 8001350:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001354:	e00a      	b.n	800136c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4908      	ldr	r1, [pc, #32]	@ (800137c <__NVIC_SetPriority+0x50>)
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	f003 030f 	and.w	r3, r3, #15
 8001362:	3b04      	subs	r3, #4
 8001364:	0112      	lsls	r2, r2, #4
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	440b      	add	r3, r1
 800136a:	761a      	strb	r2, [r3, #24]
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000e100 	.word	0xe000e100
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001380:	b480      	push	{r7}
 8001382:	b089      	sub	sp, #36	@ 0x24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f1c3 0307 	rsb	r3, r3, #7
 800139a:	2b04      	cmp	r3, #4
 800139c:	bf28      	it	cs
 800139e:	2304      	movcs	r3, #4
 80013a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3304      	adds	r3, #4
 80013a6:	2b06      	cmp	r3, #6
 80013a8:	d902      	bls.n	80013b0 <NVIC_EncodePriority+0x30>
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3b03      	subs	r3, #3
 80013ae:	e000      	b.n	80013b2 <NVIC_EncodePriority+0x32>
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43da      	mvns	r2, r3
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	401a      	ands	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	fa01 f303 	lsl.w	r3, r1, r3
 80013d2:	43d9      	mvns	r1, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	4313      	orrs	r3, r2
         );
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3724      	adds	r7, #36	@ 0x24
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013f8:	d301      	bcc.n	80013fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00f      	b.n	800141e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001428 <SysTick_Config+0x40>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001406:	210f      	movs	r1, #15
 8001408:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800140c:	f7ff ff8e 	bl	800132c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001410:	4b05      	ldr	r3, [pc, #20]	@ (8001428 <SysTick_Config+0x40>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001416:	4b04      	ldr	r3, [pc, #16]	@ (8001428 <SysTick_Config+0x40>)
 8001418:	2207      	movs	r2, #7
 800141a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	e000e010 	.word	0xe000e010

0800142c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ff29 	bl	800128c <__NVIC_SetPriorityGrouping>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001442:	b580      	push	{r7, lr}
 8001444:	b086      	sub	sp, #24
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001454:	f7ff ff3e 	bl	80012d4 <__NVIC_GetPriorityGrouping>
 8001458:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	68b9      	ldr	r1, [r7, #8]
 800145e:	6978      	ldr	r0, [r7, #20]
 8001460:	f7ff ff8e 	bl	8001380 <NVIC_EncodePriority>
 8001464:	4602      	mov	r2, r0
 8001466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146a:	4611      	mov	r1, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff5d 	bl	800132c <__NVIC_SetPriority>
}
 8001472:	bf00      	nop
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff31 	bl	80012f0 <__NVIC_EnableIRQ>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff ffa2 	bl	80013e8 <SysTick_Config>
 80014a4:	4603      	mov	r3, r0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b089      	sub	sp, #36	@ 0x24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
 80014ca:	e16b      	b.n	80017a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014cc:	2201      	movs	r2, #1
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	f040 815a 	bne.w	800179e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d005      	beq.n	8001502 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d130      	bne.n	8001564 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	2203      	movs	r2, #3
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	68da      	ldr	r2, [r3, #12]
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001538:	2201      	movs	r2, #1
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	091b      	lsrs	r3, r3, #4
 800154e:	f003 0201 	and.w	r2, r3, #1
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b03      	cmp	r3, #3
 800156e:	d017      	beq.n	80015a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	2203      	movs	r2, #3
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d123      	bne.n	80015f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	08da      	lsrs	r2, r3, #3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3208      	adds	r2, #8
 80015b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	220f      	movs	r2, #15
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	691a      	ldr	r2, [r3, #16]
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	08da      	lsrs	r2, r3, #3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3208      	adds	r2, #8
 80015ee:	69b9      	ldr	r1, [r7, #24]
 80015f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	2203      	movs	r2, #3
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0203 	and.w	r2, r3, #3
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 80b4 	beq.w	800179e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b60      	ldr	r3, [pc, #384]	@ (80017bc <HAL_GPIO_Init+0x30c>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163e:	4a5f      	ldr	r2, [pc, #380]	@ (80017bc <HAL_GPIO_Init+0x30c>)
 8001640:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001644:	6453      	str	r3, [r2, #68]	@ 0x44
 8001646:	4b5d      	ldr	r3, [pc, #372]	@ (80017bc <HAL_GPIO_Init+0x30c>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001652:	4a5b      	ldr	r2, [pc, #364]	@ (80017c0 <HAL_GPIO_Init+0x310>)
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	089b      	lsrs	r3, r3, #2
 8001658:	3302      	adds	r3, #2
 800165a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	220f      	movs	r2, #15
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4013      	ands	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a52      	ldr	r2, [pc, #328]	@ (80017c4 <HAL_GPIO_Init+0x314>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d02b      	beq.n	80016d6 <HAL_GPIO_Init+0x226>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a51      	ldr	r2, [pc, #324]	@ (80017c8 <HAL_GPIO_Init+0x318>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d025      	beq.n	80016d2 <HAL_GPIO_Init+0x222>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a50      	ldr	r2, [pc, #320]	@ (80017cc <HAL_GPIO_Init+0x31c>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d01f      	beq.n	80016ce <HAL_GPIO_Init+0x21e>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a4f      	ldr	r2, [pc, #316]	@ (80017d0 <HAL_GPIO_Init+0x320>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d019      	beq.n	80016ca <HAL_GPIO_Init+0x21a>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a4e      	ldr	r2, [pc, #312]	@ (80017d4 <HAL_GPIO_Init+0x324>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d013      	beq.n	80016c6 <HAL_GPIO_Init+0x216>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4d      	ldr	r2, [pc, #308]	@ (80017d8 <HAL_GPIO_Init+0x328>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d00d      	beq.n	80016c2 <HAL_GPIO_Init+0x212>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4c      	ldr	r2, [pc, #304]	@ (80017dc <HAL_GPIO_Init+0x32c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d007      	beq.n	80016be <HAL_GPIO_Init+0x20e>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4b      	ldr	r2, [pc, #300]	@ (80017e0 <HAL_GPIO_Init+0x330>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d101      	bne.n	80016ba <HAL_GPIO_Init+0x20a>
 80016b6:	2307      	movs	r3, #7
 80016b8:	e00e      	b.n	80016d8 <HAL_GPIO_Init+0x228>
 80016ba:	2308      	movs	r3, #8
 80016bc:	e00c      	b.n	80016d8 <HAL_GPIO_Init+0x228>
 80016be:	2306      	movs	r3, #6
 80016c0:	e00a      	b.n	80016d8 <HAL_GPIO_Init+0x228>
 80016c2:	2305      	movs	r3, #5
 80016c4:	e008      	b.n	80016d8 <HAL_GPIO_Init+0x228>
 80016c6:	2304      	movs	r3, #4
 80016c8:	e006      	b.n	80016d8 <HAL_GPIO_Init+0x228>
 80016ca:	2303      	movs	r3, #3
 80016cc:	e004      	b.n	80016d8 <HAL_GPIO_Init+0x228>
 80016ce:	2302      	movs	r3, #2
 80016d0:	e002      	b.n	80016d8 <HAL_GPIO_Init+0x228>
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <HAL_GPIO_Init+0x228>
 80016d6:	2300      	movs	r3, #0
 80016d8:	69fa      	ldr	r2, [r7, #28]
 80016da:	f002 0203 	and.w	r2, r2, #3
 80016de:	0092      	lsls	r2, r2, #2
 80016e0:	4093      	lsls	r3, r2
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016e8:	4935      	ldr	r1, [pc, #212]	@ (80017c0 <HAL_GPIO_Init+0x310>)
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	089b      	lsrs	r3, r3, #2
 80016ee:	3302      	adds	r3, #2
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016f6:	4b3b      	ldr	r3, [pc, #236]	@ (80017e4 <HAL_GPIO_Init+0x334>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	43db      	mvns	r3, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4013      	ands	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800171a:	4a32      	ldr	r2, [pc, #200]	@ (80017e4 <HAL_GPIO_Init+0x334>)
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001720:	4b30      	ldr	r3, [pc, #192]	@ (80017e4 <HAL_GPIO_Init+0x334>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	4313      	orrs	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001744:	4a27      	ldr	r2, [pc, #156]	@ (80017e4 <HAL_GPIO_Init+0x334>)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800174a:	4b26      	ldr	r3, [pc, #152]	@ (80017e4 <HAL_GPIO_Init+0x334>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	43db      	mvns	r3, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4013      	ands	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800176e:	4a1d      	ldr	r2, [pc, #116]	@ (80017e4 <HAL_GPIO_Init+0x334>)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001774:	4b1b      	ldr	r3, [pc, #108]	@ (80017e4 <HAL_GPIO_Init+0x334>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001798:	4a12      	ldr	r2, [pc, #72]	@ (80017e4 <HAL_GPIO_Init+0x334>)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3301      	adds	r3, #1
 80017a2:	61fb      	str	r3, [r7, #28]
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	2b0f      	cmp	r3, #15
 80017a8:	f67f ae90 	bls.w	80014cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	3724      	adds	r7, #36	@ 0x24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40013800 	.word	0x40013800
 80017c4:	40020000 	.word	0x40020000
 80017c8:	40020400 	.word	0x40020400
 80017cc:	40020800 	.word	0x40020800
 80017d0:	40020c00 	.word	0x40020c00
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40021400 	.word	0x40021400
 80017dc:	40021800 	.word	0x40021800
 80017e0:	40021c00 	.word	0x40021c00
 80017e4:	40013c00 	.word	0x40013c00

080017e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691a      	ldr	r2, [r3, #16]
 80017f8:	887b      	ldrh	r3, [r7, #2]
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d002      	beq.n	8001806 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001800:	2301      	movs	r3, #1
 8001802:	73fb      	strb	r3, [r7, #15]
 8001804:	e001      	b.n	800180a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001806:	2300      	movs	r3, #0
 8001808:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800180a:	7bfb      	ldrb	r3, [r7, #15]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	807b      	strh	r3, [r7, #2]
 8001824:	4613      	mov	r3, r2
 8001826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001828:	787b      	ldrb	r3, [r7, #1]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800182e:	887a      	ldrh	r2, [r7, #2]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001834:	e003      	b.n	800183e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001836:	887b      	ldrh	r3, [r7, #2]
 8001838:	041a      	lsls	r2, r3, #16
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	619a      	str	r2, [r3, #24]
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001856:	4b08      	ldr	r3, [pc, #32]	@ (8001878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001858:	695a      	ldr	r2, [r3, #20]
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	4013      	ands	r3, r2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d006      	beq.n	8001870 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001862:	4a05      	ldr	r2, [pc, #20]	@ (8001878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001868:	88fb      	ldrh	r3, [r7, #6]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff f8dc 	bl	8000a28 <HAL_GPIO_EXTI_Callback>
  }
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40013c00 	.word	0x40013c00

0800187c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e267      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d075      	beq.n	8001986 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800189a:	4b88      	ldr	r3, [pc, #544]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 030c 	and.w	r3, r3, #12
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d00c      	beq.n	80018c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018a6:	4b85      	ldr	r3, [pc, #532]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d112      	bne.n	80018d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018b2:	4b82      	ldr	r3, [pc, #520]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018be:	d10b      	bne.n	80018d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c0:	4b7e      	ldr	r3, [pc, #504]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d05b      	beq.n	8001984 <HAL_RCC_OscConfig+0x108>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d157      	bne.n	8001984 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e242      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018e0:	d106      	bne.n	80018f0 <HAL_RCC_OscConfig+0x74>
 80018e2:	4b76      	ldr	r3, [pc, #472]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a75      	ldr	r2, [pc, #468]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 80018e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e01d      	b.n	800192c <HAL_RCC_OscConfig+0xb0>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018f8:	d10c      	bne.n	8001914 <HAL_RCC_OscConfig+0x98>
 80018fa:	4b70      	ldr	r3, [pc, #448]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a6f      	ldr	r2, [pc, #444]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 8001900:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	4b6d      	ldr	r3, [pc, #436]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a6c      	ldr	r2, [pc, #432]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 800190c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e00b      	b.n	800192c <HAL_RCC_OscConfig+0xb0>
 8001914:	4b69      	ldr	r3, [pc, #420]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a68      	ldr	r2, [pc, #416]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 800191a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800191e:	6013      	str	r3, [r2, #0]
 8001920:	4b66      	ldr	r3, [pc, #408]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a65      	ldr	r2, [pc, #404]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 8001926:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800192a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d013      	beq.n	800195c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff fc7a 	bl	800122c <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800193c:	f7ff fc76 	bl	800122c <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b64      	cmp	r3, #100	@ 0x64
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e207      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194e:	4b5b      	ldr	r3, [pc, #364]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0xc0>
 800195a:	e014      	b.n	8001986 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7ff fc66 	bl	800122c <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001964:	f7ff fc62 	bl	800122c <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b64      	cmp	r3, #100	@ 0x64
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e1f3      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001976:	4b51      	ldr	r3, [pc, #324]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0xe8>
 8001982:	e000      	b.n	8001986 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d063      	beq.n	8001a5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001992:	4b4a      	ldr	r3, [pc, #296]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00b      	beq.n	80019b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800199e:	4b47      	ldr	r3, [pc, #284]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80019a6:	2b08      	cmp	r3, #8
 80019a8:	d11c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019aa:	4b44      	ldr	r3, [pc, #272]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d116      	bne.n	80019e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b6:	4b41      	ldr	r3, [pc, #260]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d005      	beq.n	80019ce <HAL_RCC_OscConfig+0x152>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d001      	beq.n	80019ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e1c7      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ce:	4b3b      	ldr	r3, [pc, #236]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	4937      	ldr	r1, [pc, #220]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e2:	e03a      	b.n	8001a5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d020      	beq.n	8001a2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ec:	4b34      	ldr	r3, [pc, #208]	@ (8001ac0 <HAL_RCC_OscConfig+0x244>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f2:	f7ff fc1b 	bl	800122c <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019fa:	f7ff fc17 	bl	800122c <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e1a8      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a18:	4b28      	ldr	r3, [pc, #160]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	4925      	ldr	r1, [pc, #148]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	600b      	str	r3, [r1, #0]
 8001a2c:	e015      	b.n	8001a5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2e:	4b24      	ldr	r3, [pc, #144]	@ (8001ac0 <HAL_RCC_OscConfig+0x244>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a34:	f7ff fbfa 	bl	800122c <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a3c:	f7ff fbf6 	bl	800122c <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e187      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d036      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d016      	beq.n	8001a9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a6e:	4b15      	ldr	r3, [pc, #84]	@ (8001ac4 <HAL_RCC_OscConfig+0x248>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a74:	f7ff fbda 	bl	800122c <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a7c:	f7ff fbd6 	bl	800122c <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e167      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 8001a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x200>
 8001a9a:	e01b      	b.n	8001ad4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a9c:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <HAL_RCC_OscConfig+0x248>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa2:	f7ff fbc3 	bl	800122c <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa8:	e00e      	b.n	8001ac8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aaa:	f7ff fbbf 	bl	800122c <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d907      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e150      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	42470000 	.word	0x42470000
 8001ac4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac8:	4b88      	ldr	r3, [pc, #544]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001aca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1ea      	bne.n	8001aaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 8097 	beq.w	8001c10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae6:	4b81      	ldr	r3, [pc, #516]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10f      	bne.n	8001b12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	4b7d      	ldr	r3, [pc, #500]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	4a7c      	ldr	r2, [pc, #496]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b02:	4b7a      	ldr	r3, [pc, #488]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b12:	4b77      	ldr	r3, [pc, #476]	@ (8001cf0 <HAL_RCC_OscConfig+0x474>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d118      	bne.n	8001b50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b1e:	4b74      	ldr	r3, [pc, #464]	@ (8001cf0 <HAL_RCC_OscConfig+0x474>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a73      	ldr	r2, [pc, #460]	@ (8001cf0 <HAL_RCC_OscConfig+0x474>)
 8001b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b2a:	f7ff fb7f 	bl	800122c <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b32:	f7ff fb7b 	bl	800122c <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e10c      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b44:	4b6a      	ldr	r3, [pc, #424]	@ (8001cf0 <HAL_RCC_OscConfig+0x474>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d106      	bne.n	8001b66 <HAL_RCC_OscConfig+0x2ea>
 8001b58:	4b64      	ldr	r3, [pc, #400]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b5c:	4a63      	ldr	r2, [pc, #396]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b64:	e01c      	b.n	8001ba0 <HAL_RCC_OscConfig+0x324>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2b05      	cmp	r3, #5
 8001b6c:	d10c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x30c>
 8001b6e:	4b5f      	ldr	r3, [pc, #380]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b72:	4a5e      	ldr	r2, [pc, #376]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b74:	f043 0304 	orr.w	r3, r3, #4
 8001b78:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b7a:	4b5c      	ldr	r3, [pc, #368]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b7e:	4a5b      	ldr	r2, [pc, #364]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b86:	e00b      	b.n	8001ba0 <HAL_RCC_OscConfig+0x324>
 8001b88:	4b58      	ldr	r3, [pc, #352]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b8c:	4a57      	ldr	r2, [pc, #348]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b8e:	f023 0301 	bic.w	r3, r3, #1
 8001b92:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b94:	4b55      	ldr	r3, [pc, #340]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b98:	4a54      	ldr	r2, [pc, #336]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b9a:	f023 0304 	bic.w	r3, r3, #4
 8001b9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d015      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba8:	f7ff fb40 	bl	800122c <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bae:	e00a      	b.n	8001bc6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb0:	f7ff fb3c 	bl	800122c <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e0cb      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc6:	4b49      	ldr	r3, [pc, #292]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0ee      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x334>
 8001bd2:	e014      	b.n	8001bfe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd4:	f7ff fb2a 	bl	800122c <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bda:	e00a      	b.n	8001bf2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bdc:	f7ff fb26 	bl	800122c <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e0b5      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf2:	4b3e      	ldr	r3, [pc, #248]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1ee      	bne.n	8001bdc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bfe:	7dfb      	ldrb	r3, [r7, #23]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d105      	bne.n	8001c10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c04:	4b39      	ldr	r3, [pc, #228]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c08:	4a38      	ldr	r2, [pc, #224]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001c0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80a1 	beq.w	8001d5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c1a:	4b34      	ldr	r3, [pc, #208]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	2b08      	cmp	r3, #8
 8001c24:	d05c      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d141      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2e:	4b31      	ldr	r3, [pc, #196]	@ (8001cf4 <HAL_RCC_OscConfig+0x478>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c34:	f7ff fafa 	bl	800122c <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c3c:	f7ff faf6 	bl	800122c <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e087      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4e:	4b27      	ldr	r3, [pc, #156]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69da      	ldr	r2, [r3, #28]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c68:	019b      	lsls	r3, r3, #6
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c70:	085b      	lsrs	r3, r3, #1
 8001c72:	3b01      	subs	r3, #1
 8001c74:	041b      	lsls	r3, r3, #16
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c7c:	061b      	lsls	r3, r3, #24
 8001c7e:	491b      	ldr	r1, [pc, #108]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c84:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf4 <HAL_RCC_OscConfig+0x478>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8a:	f7ff facf 	bl	800122c <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c92:	f7ff facb 	bl	800122c <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e05c      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca4:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x416>
 8001cb0:	e054      	b.n	8001d5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb2:	4b10      	ldr	r3, [pc, #64]	@ (8001cf4 <HAL_RCC_OscConfig+0x478>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fab8 	bl	800122c <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7ff fab4 	bl	800122c <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e045      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd2:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x444>
 8001cde:	e03d      	b.n	8001d5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d107      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e038      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40007000 	.word	0x40007000
 8001cf4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d68 <HAL_RCC_OscConfig+0x4ec>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d028      	beq.n	8001d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d121      	bne.n	8001d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d11a      	bne.n	8001d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d28:	4013      	ands	r3, r2
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d111      	bne.n	8001d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d3e:	085b      	lsrs	r3, r3, #1
 8001d40:	3b01      	subs	r3, #1
 8001d42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d107      	bne.n	8001d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800

08001d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e0cc      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d80:	4b68      	ldr	r3, [pc, #416]	@ (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d90c      	bls.n	8001da8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8e:	4b65      	ldr	r3, [pc, #404]	@ (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d96:	4b63      	ldr	r3, [pc, #396]	@ (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d001      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0b8      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d020      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dc0:	4b59      	ldr	r3, [pc, #356]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	4a58      	ldr	r2, [pc, #352]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001dca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dd8:	4b53      	ldr	r3, [pc, #332]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	4a52      	ldr	r2, [pc, #328]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001dde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001de2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de4:	4b50      	ldr	r3, [pc, #320]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	494d      	ldr	r1, [pc, #308]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d044      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d107      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0a:	4b47      	ldr	r3, [pc, #284]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d119      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e07f      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d003      	beq.n	8001e2a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d107      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e2a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d109      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e06f      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e3a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e067      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e4a:	4b37      	ldr	r3, [pc, #220]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f023 0203 	bic.w	r2, r3, #3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	4934      	ldr	r1, [pc, #208]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e5c:	f7ff f9e6 	bl	800122c <HAL_GetTick>
 8001e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e62:	e00a      	b.n	8001e7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e64:	f7ff f9e2 	bl	800122c <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e04f      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 020c 	and.w	r2, r3, #12
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d1eb      	bne.n	8001e64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e8c:	4b25      	ldr	r3, [pc, #148]	@ (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d20c      	bcs.n	8001eb4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9a:	4b22      	ldr	r3, [pc, #136]	@ (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea2:	4b20      	ldr	r3, [pc, #128]	@ (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d001      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e032      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d008      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec0:	4b19      	ldr	r3, [pc, #100]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	4916      	ldr	r1, [pc, #88]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d009      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ede:	4b12      	ldr	r3, [pc, #72]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	490e      	ldr	r1, [pc, #56]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ef2:	f000 f821 	bl	8001f38 <HAL_RCC_GetSysClockFreq>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	490a      	ldr	r1, [pc, #40]	@ (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001f04:	5ccb      	ldrb	r3, [r1, r3]
 8001f06:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0a:	4a09      	ldr	r2, [pc, #36]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001f0e:	4b09      	ldr	r3, [pc, #36]	@ (8001f34 <HAL_RCC_ClockConfig+0x1c8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff f946 	bl	80011a4 <HAL_InitTick>

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40023c00 	.word	0x40023c00
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	08002a90 	.word	0x08002a90
 8001f30:	20000000 	.word	0x20000000
 8001f34:	20000004 	.word	0x20000004

08001f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f3c:	b090      	sub	sp, #64	@ 0x40
 8001f3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f50:	4b59      	ldr	r3, [pc, #356]	@ (80020b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 030c 	and.w	r3, r3, #12
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	d00d      	beq.n	8001f78 <HAL_RCC_GetSysClockFreq+0x40>
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	f200 80a1 	bhi.w	80020a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <HAL_RCC_GetSysClockFreq+0x34>
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d003      	beq.n	8001f72 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f6a:	e09b      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f6c:	4b53      	ldr	r3, [pc, #332]	@ (80020bc <HAL_RCC_GetSysClockFreq+0x184>)
 8001f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f70:	e09b      	b.n	80020aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f72:	4b53      	ldr	r3, [pc, #332]	@ (80020c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f74:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f76:	e098      	b.n	80020aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f78:	4b4f      	ldr	r3, [pc, #316]	@ (80020b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f80:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f82:	4b4d      	ldr	r3, [pc, #308]	@ (80020b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d028      	beq.n	8001fe0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f8e:	4b4a      	ldr	r3, [pc, #296]	@ (80020b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	099b      	lsrs	r3, r3, #6
 8001f94:	2200      	movs	r2, #0
 8001f96:	623b      	str	r3, [r7, #32]
 8001f98:	627a      	str	r2, [r7, #36]	@ 0x24
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4b47      	ldr	r3, [pc, #284]	@ (80020c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fa4:	fb03 f201 	mul.w	r2, r3, r1
 8001fa8:	2300      	movs	r3, #0
 8001faa:	fb00 f303 	mul.w	r3, r0, r3
 8001fae:	4413      	add	r3, r2
 8001fb0:	4a43      	ldr	r2, [pc, #268]	@ (80020c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fb2:	fba0 1202 	umull	r1, r2, r0, r2
 8001fb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001fb8:	460a      	mov	r2, r1
 8001fba:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001fbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fbe:	4413      	add	r3, r2
 8001fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	61bb      	str	r3, [r7, #24]
 8001fc8:	61fa      	str	r2, [r7, #28]
 8001fca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001fd2:	f7fe f955 	bl	8000280 <__aeabi_uldivmod>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4613      	mov	r3, r2
 8001fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fde:	e053      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fe0:	4b35      	ldr	r3, [pc, #212]	@ (80020b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	099b      	lsrs	r3, r3, #6
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	617a      	str	r2, [r7, #20]
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ff2:	f04f 0b00 	mov.w	fp, #0
 8001ff6:	4652      	mov	r2, sl
 8001ff8:	465b      	mov	r3, fp
 8001ffa:	f04f 0000 	mov.w	r0, #0
 8001ffe:	f04f 0100 	mov.w	r1, #0
 8002002:	0159      	lsls	r1, r3, #5
 8002004:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002008:	0150      	lsls	r0, r2, #5
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	ebb2 080a 	subs.w	r8, r2, sl
 8002012:	eb63 090b 	sbc.w	r9, r3, fp
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	f04f 0300 	mov.w	r3, #0
 800201e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002022:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002026:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800202a:	ebb2 0408 	subs.w	r4, r2, r8
 800202e:	eb63 0509 	sbc.w	r5, r3, r9
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	00eb      	lsls	r3, r5, #3
 800203c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002040:	00e2      	lsls	r2, r4, #3
 8002042:	4614      	mov	r4, r2
 8002044:	461d      	mov	r5, r3
 8002046:	eb14 030a 	adds.w	r3, r4, sl
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	eb45 030b 	adc.w	r3, r5, fp
 8002050:	607b      	str	r3, [r7, #4]
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800205e:	4629      	mov	r1, r5
 8002060:	028b      	lsls	r3, r1, #10
 8002062:	4621      	mov	r1, r4
 8002064:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002068:	4621      	mov	r1, r4
 800206a:	028a      	lsls	r2, r1, #10
 800206c:	4610      	mov	r0, r2
 800206e:	4619      	mov	r1, r3
 8002070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002072:	2200      	movs	r2, #0
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	60fa      	str	r2, [r7, #12]
 8002078:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800207c:	f7fe f900 	bl	8000280 <__aeabi_uldivmod>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4613      	mov	r3, r2
 8002086:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002088:	4b0b      	ldr	r3, [pc, #44]	@ (80020b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	0c1b      	lsrs	r3, r3, #16
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	3301      	adds	r3, #1
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002098:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800209a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800209c:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80020a2:	e002      	b.n	80020aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020a4:	4b05      	ldr	r3, [pc, #20]	@ (80020bc <HAL_RCC_GetSysClockFreq+0x184>)
 80020a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80020a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3740      	adds	r7, #64	@ 0x40
 80020b0:	46bd      	mov	sp, r7
 80020b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020b6:	bf00      	nop
 80020b8:	40023800 	.word	0x40023800
 80020bc:	00f42400 	.word	0x00f42400
 80020c0:	017d7840 	.word	0x017d7840

080020c4 <siprintf>:
 80020c4:	b40e      	push	{r1, r2, r3}
 80020c6:	b500      	push	{lr}
 80020c8:	b09c      	sub	sp, #112	@ 0x70
 80020ca:	ab1d      	add	r3, sp, #116	@ 0x74
 80020cc:	9002      	str	r0, [sp, #8]
 80020ce:	9006      	str	r0, [sp, #24]
 80020d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80020d4:	4809      	ldr	r0, [pc, #36]	@ (80020fc <siprintf+0x38>)
 80020d6:	9107      	str	r1, [sp, #28]
 80020d8:	9104      	str	r1, [sp, #16]
 80020da:	4909      	ldr	r1, [pc, #36]	@ (8002100 <siprintf+0x3c>)
 80020dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80020e0:	9105      	str	r1, [sp, #20]
 80020e2:	6800      	ldr	r0, [r0, #0]
 80020e4:	9301      	str	r3, [sp, #4]
 80020e6:	a902      	add	r1, sp, #8
 80020e8:	f000 f8b8 	bl	800225c <_svfiprintf_r>
 80020ec:	9b02      	ldr	r3, [sp, #8]
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
 80020f2:	b01c      	add	sp, #112	@ 0x70
 80020f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80020f8:	b003      	add	sp, #12
 80020fa:	4770      	bx	lr
 80020fc:	2000000c 	.word	0x2000000c
 8002100:	ffff0208 	.word	0xffff0208

08002104 <strncpy>:
 8002104:	b510      	push	{r4, lr}
 8002106:	3901      	subs	r1, #1
 8002108:	4603      	mov	r3, r0
 800210a:	b132      	cbz	r2, 800211a <strncpy+0x16>
 800210c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002110:	f803 4b01 	strb.w	r4, [r3], #1
 8002114:	3a01      	subs	r2, #1
 8002116:	2c00      	cmp	r4, #0
 8002118:	d1f7      	bne.n	800210a <strncpy+0x6>
 800211a:	441a      	add	r2, r3
 800211c:	2100      	movs	r1, #0
 800211e:	4293      	cmp	r3, r2
 8002120:	d100      	bne.n	8002124 <strncpy+0x20>
 8002122:	bd10      	pop	{r4, pc}
 8002124:	f803 1b01 	strb.w	r1, [r3], #1
 8002128:	e7f9      	b.n	800211e <strncpy+0x1a>

0800212a <memset>:
 800212a:	4402      	add	r2, r0
 800212c:	4603      	mov	r3, r0
 800212e:	4293      	cmp	r3, r2
 8002130:	d100      	bne.n	8002134 <memset+0xa>
 8002132:	4770      	bx	lr
 8002134:	f803 1b01 	strb.w	r1, [r3], #1
 8002138:	e7f9      	b.n	800212e <memset+0x4>
	...

0800213c <__errno>:
 800213c:	4b01      	ldr	r3, [pc, #4]	@ (8002144 <__errno+0x8>)
 800213e:	6818      	ldr	r0, [r3, #0]
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	2000000c 	.word	0x2000000c

08002148 <__libc_init_array>:
 8002148:	b570      	push	{r4, r5, r6, lr}
 800214a:	4d0d      	ldr	r5, [pc, #52]	@ (8002180 <__libc_init_array+0x38>)
 800214c:	4c0d      	ldr	r4, [pc, #52]	@ (8002184 <__libc_init_array+0x3c>)
 800214e:	1b64      	subs	r4, r4, r5
 8002150:	10a4      	asrs	r4, r4, #2
 8002152:	2600      	movs	r6, #0
 8002154:	42a6      	cmp	r6, r4
 8002156:	d109      	bne.n	800216c <__libc_init_array+0x24>
 8002158:	4d0b      	ldr	r5, [pc, #44]	@ (8002188 <__libc_init_array+0x40>)
 800215a:	4c0c      	ldr	r4, [pc, #48]	@ (800218c <__libc_init_array+0x44>)
 800215c:	f000 fc6e 	bl	8002a3c <_init>
 8002160:	1b64      	subs	r4, r4, r5
 8002162:	10a4      	asrs	r4, r4, #2
 8002164:	2600      	movs	r6, #0
 8002166:	42a6      	cmp	r6, r4
 8002168:	d105      	bne.n	8002176 <__libc_init_array+0x2e>
 800216a:	bd70      	pop	{r4, r5, r6, pc}
 800216c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002170:	4798      	blx	r3
 8002172:	3601      	adds	r6, #1
 8002174:	e7ee      	b.n	8002154 <__libc_init_array+0xc>
 8002176:	f855 3b04 	ldr.w	r3, [r5], #4
 800217a:	4798      	blx	r3
 800217c:	3601      	adds	r6, #1
 800217e:	e7f2      	b.n	8002166 <__libc_init_array+0x1e>
 8002180:	08002adc 	.word	0x08002adc
 8002184:	08002adc 	.word	0x08002adc
 8002188:	08002adc 	.word	0x08002adc
 800218c:	08002ae0 	.word	0x08002ae0

08002190 <__retarget_lock_acquire_recursive>:
 8002190:	4770      	bx	lr

08002192 <__retarget_lock_release_recursive>:
 8002192:	4770      	bx	lr

08002194 <strcpy>:
 8002194:	4603      	mov	r3, r0
 8002196:	f811 2b01 	ldrb.w	r2, [r1], #1
 800219a:	f803 2b01 	strb.w	r2, [r3], #1
 800219e:	2a00      	cmp	r2, #0
 80021a0:	d1f9      	bne.n	8002196 <strcpy+0x2>
 80021a2:	4770      	bx	lr

080021a4 <__ssputs_r>:
 80021a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021a8:	688e      	ldr	r6, [r1, #8]
 80021aa:	461f      	mov	r7, r3
 80021ac:	42be      	cmp	r6, r7
 80021ae:	680b      	ldr	r3, [r1, #0]
 80021b0:	4682      	mov	sl, r0
 80021b2:	460c      	mov	r4, r1
 80021b4:	4690      	mov	r8, r2
 80021b6:	d82d      	bhi.n	8002214 <__ssputs_r+0x70>
 80021b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80021bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80021c0:	d026      	beq.n	8002210 <__ssputs_r+0x6c>
 80021c2:	6965      	ldr	r5, [r4, #20]
 80021c4:	6909      	ldr	r1, [r1, #16]
 80021c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80021ca:	eba3 0901 	sub.w	r9, r3, r1
 80021ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80021d2:	1c7b      	adds	r3, r7, #1
 80021d4:	444b      	add	r3, r9
 80021d6:	106d      	asrs	r5, r5, #1
 80021d8:	429d      	cmp	r5, r3
 80021da:	bf38      	it	cc
 80021dc:	461d      	movcc	r5, r3
 80021de:	0553      	lsls	r3, r2, #21
 80021e0:	d527      	bpl.n	8002232 <__ssputs_r+0x8e>
 80021e2:	4629      	mov	r1, r5
 80021e4:	f000 f958 	bl	8002498 <_malloc_r>
 80021e8:	4606      	mov	r6, r0
 80021ea:	b360      	cbz	r0, 8002246 <__ssputs_r+0xa2>
 80021ec:	6921      	ldr	r1, [r4, #16]
 80021ee:	464a      	mov	r2, r9
 80021f0:	f000 fbc4 	bl	800297c <memcpy>
 80021f4:	89a3      	ldrh	r3, [r4, #12]
 80021f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80021fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021fe:	81a3      	strh	r3, [r4, #12]
 8002200:	6126      	str	r6, [r4, #16]
 8002202:	6165      	str	r5, [r4, #20]
 8002204:	444e      	add	r6, r9
 8002206:	eba5 0509 	sub.w	r5, r5, r9
 800220a:	6026      	str	r6, [r4, #0]
 800220c:	60a5      	str	r5, [r4, #8]
 800220e:	463e      	mov	r6, r7
 8002210:	42be      	cmp	r6, r7
 8002212:	d900      	bls.n	8002216 <__ssputs_r+0x72>
 8002214:	463e      	mov	r6, r7
 8002216:	6820      	ldr	r0, [r4, #0]
 8002218:	4632      	mov	r2, r6
 800221a:	4641      	mov	r1, r8
 800221c:	f000 fb84 	bl	8002928 <memmove>
 8002220:	68a3      	ldr	r3, [r4, #8]
 8002222:	1b9b      	subs	r3, r3, r6
 8002224:	60a3      	str	r3, [r4, #8]
 8002226:	6823      	ldr	r3, [r4, #0]
 8002228:	4433      	add	r3, r6
 800222a:	6023      	str	r3, [r4, #0]
 800222c:	2000      	movs	r0, #0
 800222e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002232:	462a      	mov	r2, r5
 8002234:	f000 fb4a 	bl	80028cc <_realloc_r>
 8002238:	4606      	mov	r6, r0
 800223a:	2800      	cmp	r0, #0
 800223c:	d1e0      	bne.n	8002200 <__ssputs_r+0x5c>
 800223e:	6921      	ldr	r1, [r4, #16]
 8002240:	4650      	mov	r0, sl
 8002242:	f000 fba9 	bl	8002998 <_free_r>
 8002246:	230c      	movs	r3, #12
 8002248:	f8ca 3000 	str.w	r3, [sl]
 800224c:	89a3      	ldrh	r3, [r4, #12]
 800224e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002252:	81a3      	strh	r3, [r4, #12]
 8002254:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002258:	e7e9      	b.n	800222e <__ssputs_r+0x8a>
	...

0800225c <_svfiprintf_r>:
 800225c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002260:	4698      	mov	r8, r3
 8002262:	898b      	ldrh	r3, [r1, #12]
 8002264:	061b      	lsls	r3, r3, #24
 8002266:	b09d      	sub	sp, #116	@ 0x74
 8002268:	4607      	mov	r7, r0
 800226a:	460d      	mov	r5, r1
 800226c:	4614      	mov	r4, r2
 800226e:	d510      	bpl.n	8002292 <_svfiprintf_r+0x36>
 8002270:	690b      	ldr	r3, [r1, #16]
 8002272:	b973      	cbnz	r3, 8002292 <_svfiprintf_r+0x36>
 8002274:	2140      	movs	r1, #64	@ 0x40
 8002276:	f000 f90f 	bl	8002498 <_malloc_r>
 800227a:	6028      	str	r0, [r5, #0]
 800227c:	6128      	str	r0, [r5, #16]
 800227e:	b930      	cbnz	r0, 800228e <_svfiprintf_r+0x32>
 8002280:	230c      	movs	r3, #12
 8002282:	603b      	str	r3, [r7, #0]
 8002284:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002288:	b01d      	add	sp, #116	@ 0x74
 800228a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800228e:	2340      	movs	r3, #64	@ 0x40
 8002290:	616b      	str	r3, [r5, #20]
 8002292:	2300      	movs	r3, #0
 8002294:	9309      	str	r3, [sp, #36]	@ 0x24
 8002296:	2320      	movs	r3, #32
 8002298:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800229c:	f8cd 800c 	str.w	r8, [sp, #12]
 80022a0:	2330      	movs	r3, #48	@ 0x30
 80022a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002440 <_svfiprintf_r+0x1e4>
 80022a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80022aa:	f04f 0901 	mov.w	r9, #1
 80022ae:	4623      	mov	r3, r4
 80022b0:	469a      	mov	sl, r3
 80022b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80022b6:	b10a      	cbz	r2, 80022bc <_svfiprintf_r+0x60>
 80022b8:	2a25      	cmp	r2, #37	@ 0x25
 80022ba:	d1f9      	bne.n	80022b0 <_svfiprintf_r+0x54>
 80022bc:	ebba 0b04 	subs.w	fp, sl, r4
 80022c0:	d00b      	beq.n	80022da <_svfiprintf_r+0x7e>
 80022c2:	465b      	mov	r3, fp
 80022c4:	4622      	mov	r2, r4
 80022c6:	4629      	mov	r1, r5
 80022c8:	4638      	mov	r0, r7
 80022ca:	f7ff ff6b 	bl	80021a4 <__ssputs_r>
 80022ce:	3001      	adds	r0, #1
 80022d0:	f000 80a7 	beq.w	8002422 <_svfiprintf_r+0x1c6>
 80022d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80022d6:	445a      	add	r2, fp
 80022d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80022da:	f89a 3000 	ldrb.w	r3, [sl]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 809f 	beq.w	8002422 <_svfiprintf_r+0x1c6>
 80022e4:	2300      	movs	r3, #0
 80022e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80022ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80022ee:	f10a 0a01 	add.w	sl, sl, #1
 80022f2:	9304      	str	r3, [sp, #16]
 80022f4:	9307      	str	r3, [sp, #28]
 80022f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80022fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80022fc:	4654      	mov	r4, sl
 80022fe:	2205      	movs	r2, #5
 8002300:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002304:	484e      	ldr	r0, [pc, #312]	@ (8002440 <_svfiprintf_r+0x1e4>)
 8002306:	f7fd ff6b 	bl	80001e0 <memchr>
 800230a:	9a04      	ldr	r2, [sp, #16]
 800230c:	b9d8      	cbnz	r0, 8002346 <_svfiprintf_r+0xea>
 800230e:	06d0      	lsls	r0, r2, #27
 8002310:	bf44      	itt	mi
 8002312:	2320      	movmi	r3, #32
 8002314:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002318:	0711      	lsls	r1, r2, #28
 800231a:	bf44      	itt	mi
 800231c:	232b      	movmi	r3, #43	@ 0x2b
 800231e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002322:	f89a 3000 	ldrb.w	r3, [sl]
 8002326:	2b2a      	cmp	r3, #42	@ 0x2a
 8002328:	d015      	beq.n	8002356 <_svfiprintf_r+0xfa>
 800232a:	9a07      	ldr	r2, [sp, #28]
 800232c:	4654      	mov	r4, sl
 800232e:	2000      	movs	r0, #0
 8002330:	f04f 0c0a 	mov.w	ip, #10
 8002334:	4621      	mov	r1, r4
 8002336:	f811 3b01 	ldrb.w	r3, [r1], #1
 800233a:	3b30      	subs	r3, #48	@ 0x30
 800233c:	2b09      	cmp	r3, #9
 800233e:	d94b      	bls.n	80023d8 <_svfiprintf_r+0x17c>
 8002340:	b1b0      	cbz	r0, 8002370 <_svfiprintf_r+0x114>
 8002342:	9207      	str	r2, [sp, #28]
 8002344:	e014      	b.n	8002370 <_svfiprintf_r+0x114>
 8002346:	eba0 0308 	sub.w	r3, r0, r8
 800234a:	fa09 f303 	lsl.w	r3, r9, r3
 800234e:	4313      	orrs	r3, r2
 8002350:	9304      	str	r3, [sp, #16]
 8002352:	46a2      	mov	sl, r4
 8002354:	e7d2      	b.n	80022fc <_svfiprintf_r+0xa0>
 8002356:	9b03      	ldr	r3, [sp, #12]
 8002358:	1d19      	adds	r1, r3, #4
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	9103      	str	r1, [sp, #12]
 800235e:	2b00      	cmp	r3, #0
 8002360:	bfbb      	ittet	lt
 8002362:	425b      	neglt	r3, r3
 8002364:	f042 0202 	orrlt.w	r2, r2, #2
 8002368:	9307      	strge	r3, [sp, #28]
 800236a:	9307      	strlt	r3, [sp, #28]
 800236c:	bfb8      	it	lt
 800236e:	9204      	strlt	r2, [sp, #16]
 8002370:	7823      	ldrb	r3, [r4, #0]
 8002372:	2b2e      	cmp	r3, #46	@ 0x2e
 8002374:	d10a      	bne.n	800238c <_svfiprintf_r+0x130>
 8002376:	7863      	ldrb	r3, [r4, #1]
 8002378:	2b2a      	cmp	r3, #42	@ 0x2a
 800237a:	d132      	bne.n	80023e2 <_svfiprintf_r+0x186>
 800237c:	9b03      	ldr	r3, [sp, #12]
 800237e:	1d1a      	adds	r2, r3, #4
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	9203      	str	r2, [sp, #12]
 8002384:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002388:	3402      	adds	r4, #2
 800238a:	9305      	str	r3, [sp, #20]
 800238c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002450 <_svfiprintf_r+0x1f4>
 8002390:	7821      	ldrb	r1, [r4, #0]
 8002392:	2203      	movs	r2, #3
 8002394:	4650      	mov	r0, sl
 8002396:	f7fd ff23 	bl	80001e0 <memchr>
 800239a:	b138      	cbz	r0, 80023ac <_svfiprintf_r+0x150>
 800239c:	9b04      	ldr	r3, [sp, #16]
 800239e:	eba0 000a 	sub.w	r0, r0, sl
 80023a2:	2240      	movs	r2, #64	@ 0x40
 80023a4:	4082      	lsls	r2, r0
 80023a6:	4313      	orrs	r3, r2
 80023a8:	3401      	adds	r4, #1
 80023aa:	9304      	str	r3, [sp, #16]
 80023ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023b0:	4824      	ldr	r0, [pc, #144]	@ (8002444 <_svfiprintf_r+0x1e8>)
 80023b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80023b6:	2206      	movs	r2, #6
 80023b8:	f7fd ff12 	bl	80001e0 <memchr>
 80023bc:	2800      	cmp	r0, #0
 80023be:	d036      	beq.n	800242e <_svfiprintf_r+0x1d2>
 80023c0:	4b21      	ldr	r3, [pc, #132]	@ (8002448 <_svfiprintf_r+0x1ec>)
 80023c2:	bb1b      	cbnz	r3, 800240c <_svfiprintf_r+0x1b0>
 80023c4:	9b03      	ldr	r3, [sp, #12]
 80023c6:	3307      	adds	r3, #7
 80023c8:	f023 0307 	bic.w	r3, r3, #7
 80023cc:	3308      	adds	r3, #8
 80023ce:	9303      	str	r3, [sp, #12]
 80023d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80023d2:	4433      	add	r3, r6
 80023d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80023d6:	e76a      	b.n	80022ae <_svfiprintf_r+0x52>
 80023d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80023dc:	460c      	mov	r4, r1
 80023de:	2001      	movs	r0, #1
 80023e0:	e7a8      	b.n	8002334 <_svfiprintf_r+0xd8>
 80023e2:	2300      	movs	r3, #0
 80023e4:	3401      	adds	r4, #1
 80023e6:	9305      	str	r3, [sp, #20]
 80023e8:	4619      	mov	r1, r3
 80023ea:	f04f 0c0a 	mov.w	ip, #10
 80023ee:	4620      	mov	r0, r4
 80023f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80023f4:	3a30      	subs	r2, #48	@ 0x30
 80023f6:	2a09      	cmp	r2, #9
 80023f8:	d903      	bls.n	8002402 <_svfiprintf_r+0x1a6>
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0c6      	beq.n	800238c <_svfiprintf_r+0x130>
 80023fe:	9105      	str	r1, [sp, #20]
 8002400:	e7c4      	b.n	800238c <_svfiprintf_r+0x130>
 8002402:	fb0c 2101 	mla	r1, ip, r1, r2
 8002406:	4604      	mov	r4, r0
 8002408:	2301      	movs	r3, #1
 800240a:	e7f0      	b.n	80023ee <_svfiprintf_r+0x192>
 800240c:	ab03      	add	r3, sp, #12
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	462a      	mov	r2, r5
 8002412:	4b0e      	ldr	r3, [pc, #56]	@ (800244c <_svfiprintf_r+0x1f0>)
 8002414:	a904      	add	r1, sp, #16
 8002416:	4638      	mov	r0, r7
 8002418:	f3af 8000 	nop.w
 800241c:	1c42      	adds	r2, r0, #1
 800241e:	4606      	mov	r6, r0
 8002420:	d1d6      	bne.n	80023d0 <_svfiprintf_r+0x174>
 8002422:	89ab      	ldrh	r3, [r5, #12]
 8002424:	065b      	lsls	r3, r3, #25
 8002426:	f53f af2d 	bmi.w	8002284 <_svfiprintf_r+0x28>
 800242a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800242c:	e72c      	b.n	8002288 <_svfiprintf_r+0x2c>
 800242e:	ab03      	add	r3, sp, #12
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	462a      	mov	r2, r5
 8002434:	4b05      	ldr	r3, [pc, #20]	@ (800244c <_svfiprintf_r+0x1f0>)
 8002436:	a904      	add	r1, sp, #16
 8002438:	4638      	mov	r0, r7
 800243a:	f000 f91b 	bl	8002674 <_printf_i>
 800243e:	e7ed      	b.n	800241c <_svfiprintf_r+0x1c0>
 8002440:	08002aa0 	.word	0x08002aa0
 8002444:	08002aaa 	.word	0x08002aaa
 8002448:	00000000 	.word	0x00000000
 800244c:	080021a5 	.word	0x080021a5
 8002450:	08002aa6 	.word	0x08002aa6

08002454 <sbrk_aligned>:
 8002454:	b570      	push	{r4, r5, r6, lr}
 8002456:	4e0f      	ldr	r6, [pc, #60]	@ (8002494 <sbrk_aligned+0x40>)
 8002458:	460c      	mov	r4, r1
 800245a:	6831      	ldr	r1, [r6, #0]
 800245c:	4605      	mov	r5, r0
 800245e:	b911      	cbnz	r1, 8002466 <sbrk_aligned+0x12>
 8002460:	f000 fa7c 	bl	800295c <_sbrk_r>
 8002464:	6030      	str	r0, [r6, #0]
 8002466:	4621      	mov	r1, r4
 8002468:	4628      	mov	r0, r5
 800246a:	f000 fa77 	bl	800295c <_sbrk_r>
 800246e:	1c43      	adds	r3, r0, #1
 8002470:	d103      	bne.n	800247a <sbrk_aligned+0x26>
 8002472:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002476:	4620      	mov	r0, r4
 8002478:	bd70      	pop	{r4, r5, r6, pc}
 800247a:	1cc4      	adds	r4, r0, #3
 800247c:	f024 0403 	bic.w	r4, r4, #3
 8002480:	42a0      	cmp	r0, r4
 8002482:	d0f8      	beq.n	8002476 <sbrk_aligned+0x22>
 8002484:	1a21      	subs	r1, r4, r0
 8002486:	4628      	mov	r0, r5
 8002488:	f000 fa68 	bl	800295c <_sbrk_r>
 800248c:	3001      	adds	r0, #1
 800248e:	d1f2      	bne.n	8002476 <sbrk_aligned+0x22>
 8002490:	e7ef      	b.n	8002472 <sbrk_aligned+0x1e>
 8002492:	bf00      	nop
 8002494:	200001c0 	.word	0x200001c0

08002498 <_malloc_r>:
 8002498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800249c:	1ccd      	adds	r5, r1, #3
 800249e:	f025 0503 	bic.w	r5, r5, #3
 80024a2:	3508      	adds	r5, #8
 80024a4:	2d0c      	cmp	r5, #12
 80024a6:	bf38      	it	cc
 80024a8:	250c      	movcc	r5, #12
 80024aa:	2d00      	cmp	r5, #0
 80024ac:	4606      	mov	r6, r0
 80024ae:	db01      	blt.n	80024b4 <_malloc_r+0x1c>
 80024b0:	42a9      	cmp	r1, r5
 80024b2:	d904      	bls.n	80024be <_malloc_r+0x26>
 80024b4:	230c      	movs	r3, #12
 80024b6:	6033      	str	r3, [r6, #0]
 80024b8:	2000      	movs	r0, #0
 80024ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002594 <_malloc_r+0xfc>
 80024c2:	f000 f9f7 	bl	80028b4 <__malloc_lock>
 80024c6:	f8d8 3000 	ldr.w	r3, [r8]
 80024ca:	461c      	mov	r4, r3
 80024cc:	bb44      	cbnz	r4, 8002520 <_malloc_r+0x88>
 80024ce:	4629      	mov	r1, r5
 80024d0:	4630      	mov	r0, r6
 80024d2:	f7ff ffbf 	bl	8002454 <sbrk_aligned>
 80024d6:	1c43      	adds	r3, r0, #1
 80024d8:	4604      	mov	r4, r0
 80024da:	d158      	bne.n	800258e <_malloc_r+0xf6>
 80024dc:	f8d8 4000 	ldr.w	r4, [r8]
 80024e0:	4627      	mov	r7, r4
 80024e2:	2f00      	cmp	r7, #0
 80024e4:	d143      	bne.n	800256e <_malloc_r+0xd6>
 80024e6:	2c00      	cmp	r4, #0
 80024e8:	d04b      	beq.n	8002582 <_malloc_r+0xea>
 80024ea:	6823      	ldr	r3, [r4, #0]
 80024ec:	4639      	mov	r1, r7
 80024ee:	4630      	mov	r0, r6
 80024f0:	eb04 0903 	add.w	r9, r4, r3
 80024f4:	f000 fa32 	bl	800295c <_sbrk_r>
 80024f8:	4581      	cmp	r9, r0
 80024fa:	d142      	bne.n	8002582 <_malloc_r+0xea>
 80024fc:	6821      	ldr	r1, [r4, #0]
 80024fe:	1a6d      	subs	r5, r5, r1
 8002500:	4629      	mov	r1, r5
 8002502:	4630      	mov	r0, r6
 8002504:	f7ff ffa6 	bl	8002454 <sbrk_aligned>
 8002508:	3001      	adds	r0, #1
 800250a:	d03a      	beq.n	8002582 <_malloc_r+0xea>
 800250c:	6823      	ldr	r3, [r4, #0]
 800250e:	442b      	add	r3, r5
 8002510:	6023      	str	r3, [r4, #0]
 8002512:	f8d8 3000 	ldr.w	r3, [r8]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	bb62      	cbnz	r2, 8002574 <_malloc_r+0xdc>
 800251a:	f8c8 7000 	str.w	r7, [r8]
 800251e:	e00f      	b.n	8002540 <_malloc_r+0xa8>
 8002520:	6822      	ldr	r2, [r4, #0]
 8002522:	1b52      	subs	r2, r2, r5
 8002524:	d420      	bmi.n	8002568 <_malloc_r+0xd0>
 8002526:	2a0b      	cmp	r2, #11
 8002528:	d917      	bls.n	800255a <_malloc_r+0xc2>
 800252a:	1961      	adds	r1, r4, r5
 800252c:	42a3      	cmp	r3, r4
 800252e:	6025      	str	r5, [r4, #0]
 8002530:	bf18      	it	ne
 8002532:	6059      	strne	r1, [r3, #4]
 8002534:	6863      	ldr	r3, [r4, #4]
 8002536:	bf08      	it	eq
 8002538:	f8c8 1000 	streq.w	r1, [r8]
 800253c:	5162      	str	r2, [r4, r5]
 800253e:	604b      	str	r3, [r1, #4]
 8002540:	4630      	mov	r0, r6
 8002542:	f000 f9bd 	bl	80028c0 <__malloc_unlock>
 8002546:	f104 000b 	add.w	r0, r4, #11
 800254a:	1d23      	adds	r3, r4, #4
 800254c:	f020 0007 	bic.w	r0, r0, #7
 8002550:	1ac2      	subs	r2, r0, r3
 8002552:	bf1c      	itt	ne
 8002554:	1a1b      	subne	r3, r3, r0
 8002556:	50a3      	strne	r3, [r4, r2]
 8002558:	e7af      	b.n	80024ba <_malloc_r+0x22>
 800255a:	6862      	ldr	r2, [r4, #4]
 800255c:	42a3      	cmp	r3, r4
 800255e:	bf0c      	ite	eq
 8002560:	f8c8 2000 	streq.w	r2, [r8]
 8002564:	605a      	strne	r2, [r3, #4]
 8002566:	e7eb      	b.n	8002540 <_malloc_r+0xa8>
 8002568:	4623      	mov	r3, r4
 800256a:	6864      	ldr	r4, [r4, #4]
 800256c:	e7ae      	b.n	80024cc <_malloc_r+0x34>
 800256e:	463c      	mov	r4, r7
 8002570:	687f      	ldr	r7, [r7, #4]
 8002572:	e7b6      	b.n	80024e2 <_malloc_r+0x4a>
 8002574:	461a      	mov	r2, r3
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	42a3      	cmp	r3, r4
 800257a:	d1fb      	bne.n	8002574 <_malloc_r+0xdc>
 800257c:	2300      	movs	r3, #0
 800257e:	6053      	str	r3, [r2, #4]
 8002580:	e7de      	b.n	8002540 <_malloc_r+0xa8>
 8002582:	230c      	movs	r3, #12
 8002584:	6033      	str	r3, [r6, #0]
 8002586:	4630      	mov	r0, r6
 8002588:	f000 f99a 	bl	80028c0 <__malloc_unlock>
 800258c:	e794      	b.n	80024b8 <_malloc_r+0x20>
 800258e:	6005      	str	r5, [r0, #0]
 8002590:	e7d6      	b.n	8002540 <_malloc_r+0xa8>
 8002592:	bf00      	nop
 8002594:	200001c4 	.word	0x200001c4

08002598 <_printf_common>:
 8002598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800259c:	4616      	mov	r6, r2
 800259e:	4698      	mov	r8, r3
 80025a0:	688a      	ldr	r2, [r1, #8]
 80025a2:	690b      	ldr	r3, [r1, #16]
 80025a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80025a8:	4293      	cmp	r3, r2
 80025aa:	bfb8      	it	lt
 80025ac:	4613      	movlt	r3, r2
 80025ae:	6033      	str	r3, [r6, #0]
 80025b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80025b4:	4607      	mov	r7, r0
 80025b6:	460c      	mov	r4, r1
 80025b8:	b10a      	cbz	r2, 80025be <_printf_common+0x26>
 80025ba:	3301      	adds	r3, #1
 80025bc:	6033      	str	r3, [r6, #0]
 80025be:	6823      	ldr	r3, [r4, #0]
 80025c0:	0699      	lsls	r1, r3, #26
 80025c2:	bf42      	ittt	mi
 80025c4:	6833      	ldrmi	r3, [r6, #0]
 80025c6:	3302      	addmi	r3, #2
 80025c8:	6033      	strmi	r3, [r6, #0]
 80025ca:	6825      	ldr	r5, [r4, #0]
 80025cc:	f015 0506 	ands.w	r5, r5, #6
 80025d0:	d106      	bne.n	80025e0 <_printf_common+0x48>
 80025d2:	f104 0a19 	add.w	sl, r4, #25
 80025d6:	68e3      	ldr	r3, [r4, #12]
 80025d8:	6832      	ldr	r2, [r6, #0]
 80025da:	1a9b      	subs	r3, r3, r2
 80025dc:	42ab      	cmp	r3, r5
 80025de:	dc26      	bgt.n	800262e <_printf_common+0x96>
 80025e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80025e4:	6822      	ldr	r2, [r4, #0]
 80025e6:	3b00      	subs	r3, #0
 80025e8:	bf18      	it	ne
 80025ea:	2301      	movne	r3, #1
 80025ec:	0692      	lsls	r2, r2, #26
 80025ee:	d42b      	bmi.n	8002648 <_printf_common+0xb0>
 80025f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80025f4:	4641      	mov	r1, r8
 80025f6:	4638      	mov	r0, r7
 80025f8:	47c8      	blx	r9
 80025fa:	3001      	adds	r0, #1
 80025fc:	d01e      	beq.n	800263c <_printf_common+0xa4>
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	6922      	ldr	r2, [r4, #16]
 8002602:	f003 0306 	and.w	r3, r3, #6
 8002606:	2b04      	cmp	r3, #4
 8002608:	bf02      	ittt	eq
 800260a:	68e5      	ldreq	r5, [r4, #12]
 800260c:	6833      	ldreq	r3, [r6, #0]
 800260e:	1aed      	subeq	r5, r5, r3
 8002610:	68a3      	ldr	r3, [r4, #8]
 8002612:	bf0c      	ite	eq
 8002614:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002618:	2500      	movne	r5, #0
 800261a:	4293      	cmp	r3, r2
 800261c:	bfc4      	itt	gt
 800261e:	1a9b      	subgt	r3, r3, r2
 8002620:	18ed      	addgt	r5, r5, r3
 8002622:	2600      	movs	r6, #0
 8002624:	341a      	adds	r4, #26
 8002626:	42b5      	cmp	r5, r6
 8002628:	d11a      	bne.n	8002660 <_printf_common+0xc8>
 800262a:	2000      	movs	r0, #0
 800262c:	e008      	b.n	8002640 <_printf_common+0xa8>
 800262e:	2301      	movs	r3, #1
 8002630:	4652      	mov	r2, sl
 8002632:	4641      	mov	r1, r8
 8002634:	4638      	mov	r0, r7
 8002636:	47c8      	blx	r9
 8002638:	3001      	adds	r0, #1
 800263a:	d103      	bne.n	8002644 <_printf_common+0xac>
 800263c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002644:	3501      	adds	r5, #1
 8002646:	e7c6      	b.n	80025d6 <_printf_common+0x3e>
 8002648:	18e1      	adds	r1, r4, r3
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	2030      	movs	r0, #48	@ 0x30
 800264e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002652:	4422      	add	r2, r4
 8002654:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002658:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800265c:	3302      	adds	r3, #2
 800265e:	e7c7      	b.n	80025f0 <_printf_common+0x58>
 8002660:	2301      	movs	r3, #1
 8002662:	4622      	mov	r2, r4
 8002664:	4641      	mov	r1, r8
 8002666:	4638      	mov	r0, r7
 8002668:	47c8      	blx	r9
 800266a:	3001      	adds	r0, #1
 800266c:	d0e6      	beq.n	800263c <_printf_common+0xa4>
 800266e:	3601      	adds	r6, #1
 8002670:	e7d9      	b.n	8002626 <_printf_common+0x8e>
	...

08002674 <_printf_i>:
 8002674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002678:	7e0f      	ldrb	r7, [r1, #24]
 800267a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800267c:	2f78      	cmp	r7, #120	@ 0x78
 800267e:	4691      	mov	r9, r2
 8002680:	4680      	mov	r8, r0
 8002682:	460c      	mov	r4, r1
 8002684:	469a      	mov	sl, r3
 8002686:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800268a:	d807      	bhi.n	800269c <_printf_i+0x28>
 800268c:	2f62      	cmp	r7, #98	@ 0x62
 800268e:	d80a      	bhi.n	80026a6 <_printf_i+0x32>
 8002690:	2f00      	cmp	r7, #0
 8002692:	f000 80d2 	beq.w	800283a <_printf_i+0x1c6>
 8002696:	2f58      	cmp	r7, #88	@ 0x58
 8002698:	f000 80b9 	beq.w	800280e <_printf_i+0x19a>
 800269c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80026a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80026a4:	e03a      	b.n	800271c <_printf_i+0xa8>
 80026a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80026aa:	2b15      	cmp	r3, #21
 80026ac:	d8f6      	bhi.n	800269c <_printf_i+0x28>
 80026ae:	a101      	add	r1, pc, #4	@ (adr r1, 80026b4 <_printf_i+0x40>)
 80026b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80026b4:	0800270d 	.word	0x0800270d
 80026b8:	08002721 	.word	0x08002721
 80026bc:	0800269d 	.word	0x0800269d
 80026c0:	0800269d 	.word	0x0800269d
 80026c4:	0800269d 	.word	0x0800269d
 80026c8:	0800269d 	.word	0x0800269d
 80026cc:	08002721 	.word	0x08002721
 80026d0:	0800269d 	.word	0x0800269d
 80026d4:	0800269d 	.word	0x0800269d
 80026d8:	0800269d 	.word	0x0800269d
 80026dc:	0800269d 	.word	0x0800269d
 80026e0:	08002821 	.word	0x08002821
 80026e4:	0800274b 	.word	0x0800274b
 80026e8:	080027db 	.word	0x080027db
 80026ec:	0800269d 	.word	0x0800269d
 80026f0:	0800269d 	.word	0x0800269d
 80026f4:	08002843 	.word	0x08002843
 80026f8:	0800269d 	.word	0x0800269d
 80026fc:	0800274b 	.word	0x0800274b
 8002700:	0800269d 	.word	0x0800269d
 8002704:	0800269d 	.word	0x0800269d
 8002708:	080027e3 	.word	0x080027e3
 800270c:	6833      	ldr	r3, [r6, #0]
 800270e:	1d1a      	adds	r2, r3, #4
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6032      	str	r2, [r6, #0]
 8002714:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002718:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800271c:	2301      	movs	r3, #1
 800271e:	e09d      	b.n	800285c <_printf_i+0x1e8>
 8002720:	6833      	ldr	r3, [r6, #0]
 8002722:	6820      	ldr	r0, [r4, #0]
 8002724:	1d19      	adds	r1, r3, #4
 8002726:	6031      	str	r1, [r6, #0]
 8002728:	0606      	lsls	r6, r0, #24
 800272a:	d501      	bpl.n	8002730 <_printf_i+0xbc>
 800272c:	681d      	ldr	r5, [r3, #0]
 800272e:	e003      	b.n	8002738 <_printf_i+0xc4>
 8002730:	0645      	lsls	r5, r0, #25
 8002732:	d5fb      	bpl.n	800272c <_printf_i+0xb8>
 8002734:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002738:	2d00      	cmp	r5, #0
 800273a:	da03      	bge.n	8002744 <_printf_i+0xd0>
 800273c:	232d      	movs	r3, #45	@ 0x2d
 800273e:	426d      	negs	r5, r5
 8002740:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002744:	4859      	ldr	r0, [pc, #356]	@ (80028ac <_printf_i+0x238>)
 8002746:	230a      	movs	r3, #10
 8002748:	e011      	b.n	800276e <_printf_i+0xfa>
 800274a:	6821      	ldr	r1, [r4, #0]
 800274c:	6833      	ldr	r3, [r6, #0]
 800274e:	0608      	lsls	r0, r1, #24
 8002750:	f853 5b04 	ldr.w	r5, [r3], #4
 8002754:	d402      	bmi.n	800275c <_printf_i+0xe8>
 8002756:	0649      	lsls	r1, r1, #25
 8002758:	bf48      	it	mi
 800275a:	b2ad      	uxthmi	r5, r5
 800275c:	2f6f      	cmp	r7, #111	@ 0x6f
 800275e:	4853      	ldr	r0, [pc, #332]	@ (80028ac <_printf_i+0x238>)
 8002760:	6033      	str	r3, [r6, #0]
 8002762:	bf14      	ite	ne
 8002764:	230a      	movne	r3, #10
 8002766:	2308      	moveq	r3, #8
 8002768:	2100      	movs	r1, #0
 800276a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800276e:	6866      	ldr	r6, [r4, #4]
 8002770:	60a6      	str	r6, [r4, #8]
 8002772:	2e00      	cmp	r6, #0
 8002774:	bfa2      	ittt	ge
 8002776:	6821      	ldrge	r1, [r4, #0]
 8002778:	f021 0104 	bicge.w	r1, r1, #4
 800277c:	6021      	strge	r1, [r4, #0]
 800277e:	b90d      	cbnz	r5, 8002784 <_printf_i+0x110>
 8002780:	2e00      	cmp	r6, #0
 8002782:	d04b      	beq.n	800281c <_printf_i+0x1a8>
 8002784:	4616      	mov	r6, r2
 8002786:	fbb5 f1f3 	udiv	r1, r5, r3
 800278a:	fb03 5711 	mls	r7, r3, r1, r5
 800278e:	5dc7      	ldrb	r7, [r0, r7]
 8002790:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002794:	462f      	mov	r7, r5
 8002796:	42bb      	cmp	r3, r7
 8002798:	460d      	mov	r5, r1
 800279a:	d9f4      	bls.n	8002786 <_printf_i+0x112>
 800279c:	2b08      	cmp	r3, #8
 800279e:	d10b      	bne.n	80027b8 <_printf_i+0x144>
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	07df      	lsls	r7, r3, #31
 80027a4:	d508      	bpl.n	80027b8 <_printf_i+0x144>
 80027a6:	6923      	ldr	r3, [r4, #16]
 80027a8:	6861      	ldr	r1, [r4, #4]
 80027aa:	4299      	cmp	r1, r3
 80027ac:	bfde      	ittt	le
 80027ae:	2330      	movle	r3, #48	@ 0x30
 80027b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80027b4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80027b8:	1b92      	subs	r2, r2, r6
 80027ba:	6122      	str	r2, [r4, #16]
 80027bc:	f8cd a000 	str.w	sl, [sp]
 80027c0:	464b      	mov	r3, r9
 80027c2:	aa03      	add	r2, sp, #12
 80027c4:	4621      	mov	r1, r4
 80027c6:	4640      	mov	r0, r8
 80027c8:	f7ff fee6 	bl	8002598 <_printf_common>
 80027cc:	3001      	adds	r0, #1
 80027ce:	d14a      	bne.n	8002866 <_printf_i+0x1f2>
 80027d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80027d4:	b004      	add	sp, #16
 80027d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027da:	6823      	ldr	r3, [r4, #0]
 80027dc:	f043 0320 	orr.w	r3, r3, #32
 80027e0:	6023      	str	r3, [r4, #0]
 80027e2:	4833      	ldr	r0, [pc, #204]	@ (80028b0 <_printf_i+0x23c>)
 80027e4:	2778      	movs	r7, #120	@ 0x78
 80027e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80027ea:	6823      	ldr	r3, [r4, #0]
 80027ec:	6831      	ldr	r1, [r6, #0]
 80027ee:	061f      	lsls	r7, r3, #24
 80027f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80027f4:	d402      	bmi.n	80027fc <_printf_i+0x188>
 80027f6:	065f      	lsls	r7, r3, #25
 80027f8:	bf48      	it	mi
 80027fa:	b2ad      	uxthmi	r5, r5
 80027fc:	6031      	str	r1, [r6, #0]
 80027fe:	07d9      	lsls	r1, r3, #31
 8002800:	bf44      	itt	mi
 8002802:	f043 0320 	orrmi.w	r3, r3, #32
 8002806:	6023      	strmi	r3, [r4, #0]
 8002808:	b11d      	cbz	r5, 8002812 <_printf_i+0x19e>
 800280a:	2310      	movs	r3, #16
 800280c:	e7ac      	b.n	8002768 <_printf_i+0xf4>
 800280e:	4827      	ldr	r0, [pc, #156]	@ (80028ac <_printf_i+0x238>)
 8002810:	e7e9      	b.n	80027e6 <_printf_i+0x172>
 8002812:	6823      	ldr	r3, [r4, #0]
 8002814:	f023 0320 	bic.w	r3, r3, #32
 8002818:	6023      	str	r3, [r4, #0]
 800281a:	e7f6      	b.n	800280a <_printf_i+0x196>
 800281c:	4616      	mov	r6, r2
 800281e:	e7bd      	b.n	800279c <_printf_i+0x128>
 8002820:	6833      	ldr	r3, [r6, #0]
 8002822:	6825      	ldr	r5, [r4, #0]
 8002824:	6961      	ldr	r1, [r4, #20]
 8002826:	1d18      	adds	r0, r3, #4
 8002828:	6030      	str	r0, [r6, #0]
 800282a:	062e      	lsls	r6, r5, #24
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	d501      	bpl.n	8002834 <_printf_i+0x1c0>
 8002830:	6019      	str	r1, [r3, #0]
 8002832:	e002      	b.n	800283a <_printf_i+0x1c6>
 8002834:	0668      	lsls	r0, r5, #25
 8002836:	d5fb      	bpl.n	8002830 <_printf_i+0x1bc>
 8002838:	8019      	strh	r1, [r3, #0]
 800283a:	2300      	movs	r3, #0
 800283c:	6123      	str	r3, [r4, #16]
 800283e:	4616      	mov	r6, r2
 8002840:	e7bc      	b.n	80027bc <_printf_i+0x148>
 8002842:	6833      	ldr	r3, [r6, #0]
 8002844:	1d1a      	adds	r2, r3, #4
 8002846:	6032      	str	r2, [r6, #0]
 8002848:	681e      	ldr	r6, [r3, #0]
 800284a:	6862      	ldr	r2, [r4, #4]
 800284c:	2100      	movs	r1, #0
 800284e:	4630      	mov	r0, r6
 8002850:	f7fd fcc6 	bl	80001e0 <memchr>
 8002854:	b108      	cbz	r0, 800285a <_printf_i+0x1e6>
 8002856:	1b80      	subs	r0, r0, r6
 8002858:	6060      	str	r0, [r4, #4]
 800285a:	6863      	ldr	r3, [r4, #4]
 800285c:	6123      	str	r3, [r4, #16]
 800285e:	2300      	movs	r3, #0
 8002860:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002864:	e7aa      	b.n	80027bc <_printf_i+0x148>
 8002866:	6923      	ldr	r3, [r4, #16]
 8002868:	4632      	mov	r2, r6
 800286a:	4649      	mov	r1, r9
 800286c:	4640      	mov	r0, r8
 800286e:	47d0      	blx	sl
 8002870:	3001      	adds	r0, #1
 8002872:	d0ad      	beq.n	80027d0 <_printf_i+0x15c>
 8002874:	6823      	ldr	r3, [r4, #0]
 8002876:	079b      	lsls	r3, r3, #30
 8002878:	d413      	bmi.n	80028a2 <_printf_i+0x22e>
 800287a:	68e0      	ldr	r0, [r4, #12]
 800287c:	9b03      	ldr	r3, [sp, #12]
 800287e:	4298      	cmp	r0, r3
 8002880:	bfb8      	it	lt
 8002882:	4618      	movlt	r0, r3
 8002884:	e7a6      	b.n	80027d4 <_printf_i+0x160>
 8002886:	2301      	movs	r3, #1
 8002888:	4632      	mov	r2, r6
 800288a:	4649      	mov	r1, r9
 800288c:	4640      	mov	r0, r8
 800288e:	47d0      	blx	sl
 8002890:	3001      	adds	r0, #1
 8002892:	d09d      	beq.n	80027d0 <_printf_i+0x15c>
 8002894:	3501      	adds	r5, #1
 8002896:	68e3      	ldr	r3, [r4, #12]
 8002898:	9903      	ldr	r1, [sp, #12]
 800289a:	1a5b      	subs	r3, r3, r1
 800289c:	42ab      	cmp	r3, r5
 800289e:	dcf2      	bgt.n	8002886 <_printf_i+0x212>
 80028a0:	e7eb      	b.n	800287a <_printf_i+0x206>
 80028a2:	2500      	movs	r5, #0
 80028a4:	f104 0619 	add.w	r6, r4, #25
 80028a8:	e7f5      	b.n	8002896 <_printf_i+0x222>
 80028aa:	bf00      	nop
 80028ac:	08002ab1 	.word	0x08002ab1
 80028b0:	08002ac2 	.word	0x08002ac2

080028b4 <__malloc_lock>:
 80028b4:	4801      	ldr	r0, [pc, #4]	@ (80028bc <__malloc_lock+0x8>)
 80028b6:	f7ff bc6b 	b.w	8002190 <__retarget_lock_acquire_recursive>
 80028ba:	bf00      	nop
 80028bc:	200001bc 	.word	0x200001bc

080028c0 <__malloc_unlock>:
 80028c0:	4801      	ldr	r0, [pc, #4]	@ (80028c8 <__malloc_unlock+0x8>)
 80028c2:	f7ff bc66 	b.w	8002192 <__retarget_lock_release_recursive>
 80028c6:	bf00      	nop
 80028c8:	200001bc 	.word	0x200001bc

080028cc <_realloc_r>:
 80028cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028d0:	4680      	mov	r8, r0
 80028d2:	4615      	mov	r5, r2
 80028d4:	460c      	mov	r4, r1
 80028d6:	b921      	cbnz	r1, 80028e2 <_realloc_r+0x16>
 80028d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80028dc:	4611      	mov	r1, r2
 80028de:	f7ff bddb 	b.w	8002498 <_malloc_r>
 80028e2:	b92a      	cbnz	r2, 80028f0 <_realloc_r+0x24>
 80028e4:	f000 f858 	bl	8002998 <_free_r>
 80028e8:	2400      	movs	r4, #0
 80028ea:	4620      	mov	r0, r4
 80028ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028f0:	f000 f89c 	bl	8002a2c <_malloc_usable_size_r>
 80028f4:	4285      	cmp	r5, r0
 80028f6:	4606      	mov	r6, r0
 80028f8:	d802      	bhi.n	8002900 <_realloc_r+0x34>
 80028fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80028fe:	d8f4      	bhi.n	80028ea <_realloc_r+0x1e>
 8002900:	4629      	mov	r1, r5
 8002902:	4640      	mov	r0, r8
 8002904:	f7ff fdc8 	bl	8002498 <_malloc_r>
 8002908:	4607      	mov	r7, r0
 800290a:	2800      	cmp	r0, #0
 800290c:	d0ec      	beq.n	80028e8 <_realloc_r+0x1c>
 800290e:	42b5      	cmp	r5, r6
 8002910:	462a      	mov	r2, r5
 8002912:	4621      	mov	r1, r4
 8002914:	bf28      	it	cs
 8002916:	4632      	movcs	r2, r6
 8002918:	f000 f830 	bl	800297c <memcpy>
 800291c:	4621      	mov	r1, r4
 800291e:	4640      	mov	r0, r8
 8002920:	f000 f83a 	bl	8002998 <_free_r>
 8002924:	463c      	mov	r4, r7
 8002926:	e7e0      	b.n	80028ea <_realloc_r+0x1e>

08002928 <memmove>:
 8002928:	4288      	cmp	r0, r1
 800292a:	b510      	push	{r4, lr}
 800292c:	eb01 0402 	add.w	r4, r1, r2
 8002930:	d902      	bls.n	8002938 <memmove+0x10>
 8002932:	4284      	cmp	r4, r0
 8002934:	4623      	mov	r3, r4
 8002936:	d807      	bhi.n	8002948 <memmove+0x20>
 8002938:	1e43      	subs	r3, r0, #1
 800293a:	42a1      	cmp	r1, r4
 800293c:	d008      	beq.n	8002950 <memmove+0x28>
 800293e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002942:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002946:	e7f8      	b.n	800293a <memmove+0x12>
 8002948:	4402      	add	r2, r0
 800294a:	4601      	mov	r1, r0
 800294c:	428a      	cmp	r2, r1
 800294e:	d100      	bne.n	8002952 <memmove+0x2a>
 8002950:	bd10      	pop	{r4, pc}
 8002952:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002956:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800295a:	e7f7      	b.n	800294c <memmove+0x24>

0800295c <_sbrk_r>:
 800295c:	b538      	push	{r3, r4, r5, lr}
 800295e:	4d06      	ldr	r5, [pc, #24]	@ (8002978 <_sbrk_r+0x1c>)
 8002960:	2300      	movs	r3, #0
 8002962:	4604      	mov	r4, r0
 8002964:	4608      	mov	r0, r1
 8002966:	602b      	str	r3, [r5, #0]
 8002968:	f7fe f936 	bl	8000bd8 <_sbrk>
 800296c:	1c43      	adds	r3, r0, #1
 800296e:	d102      	bne.n	8002976 <_sbrk_r+0x1a>
 8002970:	682b      	ldr	r3, [r5, #0]
 8002972:	b103      	cbz	r3, 8002976 <_sbrk_r+0x1a>
 8002974:	6023      	str	r3, [r4, #0]
 8002976:	bd38      	pop	{r3, r4, r5, pc}
 8002978:	200001c8 	.word	0x200001c8

0800297c <memcpy>:
 800297c:	440a      	add	r2, r1
 800297e:	4291      	cmp	r1, r2
 8002980:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8002984:	d100      	bne.n	8002988 <memcpy+0xc>
 8002986:	4770      	bx	lr
 8002988:	b510      	push	{r4, lr}
 800298a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800298e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002992:	4291      	cmp	r1, r2
 8002994:	d1f9      	bne.n	800298a <memcpy+0xe>
 8002996:	bd10      	pop	{r4, pc}

08002998 <_free_r>:
 8002998:	b538      	push	{r3, r4, r5, lr}
 800299a:	4605      	mov	r5, r0
 800299c:	2900      	cmp	r1, #0
 800299e:	d041      	beq.n	8002a24 <_free_r+0x8c>
 80029a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029a4:	1f0c      	subs	r4, r1, #4
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	bfb8      	it	lt
 80029aa:	18e4      	addlt	r4, r4, r3
 80029ac:	f7ff ff82 	bl	80028b4 <__malloc_lock>
 80029b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002a28 <_free_r+0x90>)
 80029b2:	6813      	ldr	r3, [r2, #0]
 80029b4:	b933      	cbnz	r3, 80029c4 <_free_r+0x2c>
 80029b6:	6063      	str	r3, [r4, #4]
 80029b8:	6014      	str	r4, [r2, #0]
 80029ba:	4628      	mov	r0, r5
 80029bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029c0:	f7ff bf7e 	b.w	80028c0 <__malloc_unlock>
 80029c4:	42a3      	cmp	r3, r4
 80029c6:	d908      	bls.n	80029da <_free_r+0x42>
 80029c8:	6820      	ldr	r0, [r4, #0]
 80029ca:	1821      	adds	r1, r4, r0
 80029cc:	428b      	cmp	r3, r1
 80029ce:	bf01      	itttt	eq
 80029d0:	6819      	ldreq	r1, [r3, #0]
 80029d2:	685b      	ldreq	r3, [r3, #4]
 80029d4:	1809      	addeq	r1, r1, r0
 80029d6:	6021      	streq	r1, [r4, #0]
 80029d8:	e7ed      	b.n	80029b6 <_free_r+0x1e>
 80029da:	461a      	mov	r2, r3
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	b10b      	cbz	r3, 80029e4 <_free_r+0x4c>
 80029e0:	42a3      	cmp	r3, r4
 80029e2:	d9fa      	bls.n	80029da <_free_r+0x42>
 80029e4:	6811      	ldr	r1, [r2, #0]
 80029e6:	1850      	adds	r0, r2, r1
 80029e8:	42a0      	cmp	r0, r4
 80029ea:	d10b      	bne.n	8002a04 <_free_r+0x6c>
 80029ec:	6820      	ldr	r0, [r4, #0]
 80029ee:	4401      	add	r1, r0
 80029f0:	1850      	adds	r0, r2, r1
 80029f2:	4283      	cmp	r3, r0
 80029f4:	6011      	str	r1, [r2, #0]
 80029f6:	d1e0      	bne.n	80029ba <_free_r+0x22>
 80029f8:	6818      	ldr	r0, [r3, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	6053      	str	r3, [r2, #4]
 80029fe:	4408      	add	r0, r1
 8002a00:	6010      	str	r0, [r2, #0]
 8002a02:	e7da      	b.n	80029ba <_free_r+0x22>
 8002a04:	d902      	bls.n	8002a0c <_free_r+0x74>
 8002a06:	230c      	movs	r3, #12
 8002a08:	602b      	str	r3, [r5, #0]
 8002a0a:	e7d6      	b.n	80029ba <_free_r+0x22>
 8002a0c:	6820      	ldr	r0, [r4, #0]
 8002a0e:	1821      	adds	r1, r4, r0
 8002a10:	428b      	cmp	r3, r1
 8002a12:	bf04      	itt	eq
 8002a14:	6819      	ldreq	r1, [r3, #0]
 8002a16:	685b      	ldreq	r3, [r3, #4]
 8002a18:	6063      	str	r3, [r4, #4]
 8002a1a:	bf04      	itt	eq
 8002a1c:	1809      	addeq	r1, r1, r0
 8002a1e:	6021      	streq	r1, [r4, #0]
 8002a20:	6054      	str	r4, [r2, #4]
 8002a22:	e7ca      	b.n	80029ba <_free_r+0x22>
 8002a24:	bd38      	pop	{r3, r4, r5, pc}
 8002a26:	bf00      	nop
 8002a28:	200001c4 	.word	0x200001c4

08002a2c <_malloc_usable_size_r>:
 8002a2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a30:	1f18      	subs	r0, r3, #4
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	bfbc      	itt	lt
 8002a36:	580b      	ldrlt	r3, [r1, r0]
 8002a38:	18c0      	addlt	r0, r0, r3
 8002a3a:	4770      	bx	lr

08002a3c <_init>:
 8002a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a3e:	bf00      	nop
 8002a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a42:	bc08      	pop	{r3}
 8002a44:	469e      	mov	lr, r3
 8002a46:	4770      	bx	lr

08002a48 <_fini>:
 8002a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4a:	bf00      	nop
 8002a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a4e:	bc08      	pop	{r3}
 8002a50:	469e      	mov	lr, r3
 8002a52:	4770      	bx	lr
